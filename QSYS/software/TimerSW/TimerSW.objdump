
TimerSW.elf:     file format elf32-littlenios2
TimerSW.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00003254 memsz 0x00003254 flags r-x
    LOAD off    0x00005000 vaddr 0x00020000 paddr 0x00003274 align 2**12
         filesz 0x000016a0 memsz 0x000017f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003044  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000028  00020000  00003274  00005000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001678  00020028  0000329c  00005028  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  000216a0  00004914  000066a0  2**2
                  ALLOC, SMALL_DATA
  6 .ROM          00000000  00004914  00004914  000066a0  2**0
                  CONTENTS
  7 .RAM          00000000  000217f0  000217f0  000066a0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000066a0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000638  00000000  00000000  000066c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00007e23  00000000  00000000  00006d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002d28  00000000  00000000  0000eb23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002de1  00000000  00000000  0001184b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000cdc  00000000  00000000  0001462c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001e79  00000000  00000000  00015308  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000cd1  00000000  00000000  00017181  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00017e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001d8  00000000  00000000  00017e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00019eb9  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00019ebc  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00019ec1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00019ec2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00019ec3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00019ec7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00019ecb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  00019ecf  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  00019ed3  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  00019ed7  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00019edb  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000038  00000000  00000000  00019ee3  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00065ee1  00000000  00000000  00019f1b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00020000 l    d  .rodata	00000000 .rodata
00020028 l    d  .rwdata	00000000 .rwdata
000216a0 l    d  .bss	00000000 .bss
00004914 l    d  .ROM	00000000 .ROM
000217f0 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../TimerSW_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000648 l     F .text	00000054 HandlerTimerCoreInterrupt
0000069c l     F .text	00000090 SetupTimerCore
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000e94 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000102c l     F .text	00000034 alt_dev_reg
00020028 l     O .rwdata	00001060 JTAG
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00001320 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000152c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001b64 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00001edc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002010 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000203c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002298 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000023f8 l     F .text	0000003c alt_get_errno
00002434 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00021230 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
000216b8 g     O .bss	00000004 alt_instruction_exception_handler
00000f80 g     F .text	0000007c alt_main
000216f0 g     O .bss	00000100 alt_irq
000003c8 g     F .text	00000150 UpdateTime
0000329c g       *ABS*	00000000 __flash_rwdata_start
000216a0 g     O .bss	00000001 switchingAlarm
000216c8 g     O .bss	00000014 alarmTime
0000026c g     F .text	000000e8 ToHexa
000028a4 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000216c4 g     O .bss	00000004 errno
000216b0 g     O .bss	00000004 alt_argv
00029654 g       *ABS*	00000000 _gp
00000ffc g     F .text	00000030 usleep
000210b0 g     O .rwdata	00000180 alt_fd_list
000028c8 g     F .text	00000090 alt_find_dev
00002bec g     F .text	00000148 memcpy
0000237c g     F .text	0000007c alt_io_redirect
00003274 g       *ABS*	00000000 __DTOR_END__
000021fc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00001724 g     F .text	0000021c altera_avalon_jtag_uart_read
0000315c g     F .text	00000064 .hidden __udivsi3
000216a2 g     O .bss	00000001 alarmStatus
00021688 g     O .rwdata	00000004 alt_max_fd
00021668 g     O .rwdata	00000004 timerCoreStatus
00021698 g     O .rwdata	00000004 _global_impure_ptr
000217f0 g       *ABS*	00000000 __bss_end
00000da4 g     F .text	000000f0 alt_iic_isr_register
0000279c g     F .text	00000108 alt_tick
00000000 g       *ABS*	00000000 __alt_mem_ROM
00000d58 g     F .text	0000004c alt_ic_irq_enabled
00002700 g     F .text	0000009c alt_alarm_stop
000216a8 g     O .bss	00000004 alt_irq_active
00021670 g     O .rwdata	00000001 left
000000fc g     F .exceptions	000000d4 alt_irq_handler
00021088 g     O .rwdata	00000028 alt_dev_null
00001ff0 g     F .text	00000020 alt_dcache_flush_all
0002166c g     O .rwdata	00000004 ledsValue
000216a0 g       *ABS*	00000000 __ram_rwdata_end
00021680 g     O .rwdata	00000008 alt_dev_list
00020028 g       *ABS*	00000000 __ram_rodata_end
000031c0 g     F .text	00000058 .hidden __umodsi3
000217f0 g       *ABS*	00000000 end
00021664 g     O .rwdata	00000004 leds
00021654 g     O .rwdata	00000004 displays
00001260 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00021658 g     O .rwdata	00000004 switches
00003274 g       *ABS*	00000000 __CTOR_LIST__
00028000 g       *ABS*	00000000 __alt_stack_pointer
00001bdc g     F .text	0000007c alt_avalon_timer_sc_init
00001940 g     F .text	00000224 altera_avalon_jtag_uart_write
00002ee4 g     F .text	00000180 __call_exitprocs
00000230 g     F .text	0000003c _start
000216bc g     O .bss	00000004 _alt_tick_rate
000216c0 g     O .bss	00000004 _alt_nticks
00001098 g     F .text	00000064 alt_sys_init
00002dcc g     F .text	00000118 __register_exitproc
00021660 g     O .rwdata	00000004 gpioOut
000015cc g     F .text	00000068 altera_avalon_jtag_uart_close
00003218 g     F .text	00000028 .hidden __mulsi3
00020028 g       *ABS*	00000000 __ram_rwdata_start
00020000 g       *ABS*	00000000 __ram_rodata_start
000010fc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00002a60 g     F .text	000000c4 alt_get_fd
00001d84 g     F .text	00000158 alt_busy_sleep
00002b70 g     F .text	0000007c memcmp
000011bc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000217f0 g       *ABS*	00000000 __alt_stack_base
0000120c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000216a4 g     O .bss	00000004 counter
00000354 g     F .text	00000074 EncodeHexa
00002958 g     F .text	00000108 alt_find_file
00002078 g     F .text	000000a4 alt_dev_llist_insert
000216a0 g       *ABS*	00000000 __bss_start
000007bc g     F .text	00000438 main
00020000 g       *ABS*	00000000 __alt_mem_RAM
000216b4 g     O .bss	00000004 alt_envp
0000115c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002165c g     O .rwdata	00000004 buttons
0002168c g     O .rwdata	00000004 alt_errno
00003064 g     F .text	00000084 .hidden __divsi3
00003274 g       *ABS*	00000000 __CTOR_END__
00003274 g       *ABS*	00000000 __flash_rodata_start
00003274 g       *ABS*	00000000 __DTOR_LIST__
00001060 g     F .text	00000038 alt_irq_init
0000267c g     F .text	00000084 alt_release_fd
00002b24 g     F .text	00000014 atexit
0002169c g     O .rwdata	00000004 _impure_ptr
000216ac g     O .bss	00000004 alt_argc
0000217c g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00021678 g     O .rwdata	00000008 alt_fs_list
00000518 g     F .text	00000130 UpdateTimeDisplays
0000072c g     F .text	00000090 LedsUpdate
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000bf4 g     F .text	00000050 alt_ic_isr_register
000216a0 g       *ABS*	00000000 _edata
000217f0 g       *ABS*	00000000 _end
00000230 g       *ABS*	00000000 __ram_exceptions_end
00001634 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000216dc g     O .bss	00000014 actualTime
00000ccc g     F .text	0000008c alt_ic_irq_disable
00002b38 g     F .text	00000038 exit
000030e8 g     F .text	00000074 .hidden __modsi3
00028000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003240 g     F .text	00000034 _exit
00001c58 g     F .text	0000012c alt_alarm_start
00002d34 g     F .text	00000098 strlen
00002520 g     F .text	0000015c open
000021dc g     F .text	00000020 alt_icache_flush_all
00021674 g     O .rwdata	00000004 alt_priority_mask
00000c44 g     F .text	00000088 alt_ic_irq_enable
00021690 g     O .rwdata	00000008 alt_alarm_list
0000211c g     F .text	00000060 _do_ctors
000216a1 g     O .bss	00000001 settingAlarm
00001f18 g     F .text	000000d8 close
00000efc g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	1085bc04 	addi	r2,r2,5872
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	1085bc04 	addi	r2,r2,5872
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a01917 	ldw	r2,-32668(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a01917 	ldw	r2,-32668(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
     238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     23c:	d6a59514 	ori	gp,gp,38484
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     244:	1085a814 	ori	r2,r2,5792

    movhi r3, %hi(__bss_end)
     248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     24c:	18c5fc14 	ori	r3,r3,6128

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	0000efc0 	call	efc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	0000f800 	call	f80 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <alt_after_alt_main>

0000026c <ToHexa>:
bool left = true;

/**
 * Converts a integer value to 7 segment display format
 */
int ToHexa(int value) {
     26c:	defffe04 	addi	sp,sp,-8
     270:	df000115 	stw	fp,4(sp)
     274:	df000104 	addi	fp,sp,4
     278:	e13fff15 	stw	r4,-4(fp)
	switch (value) {
     27c:	e0bfff17 	ldw	r2,-4(fp)
     280:	10800368 	cmpgeui	r2,r2,13
     284:	10002e1e 	bne	r2,zero,340 <ToHexa+0xd4>
     288:	e0bfff17 	ldw	r2,-4(fp)
     28c:	100690ba 	slli	r3,r2,2
     290:	00800034 	movhi	r2,0
     294:	1080a904 	addi	r2,r2,676
     298:	1885883a 	add	r2,r3,r2
     29c:	10800017 	ldw	r2,0(r2)
     2a0:	1000683a 	jmp	r2
     2a4:	000002d8 	cmpnei	zero,zero,11
     2a8:	000002e0 	cmpeqi	zero,zero,11
     2ac:	000002e8 	cmpgeui	zero,zero,11
     2b0:	000002f0 	cmpltui	zero,zero,11
     2b4:	000002f8 	rdprs	zero,zero,11
     2b8:	00000300 	call	30 <__flash_exceptions_start+0x10>
     2bc:	00000308 	cmpgei	zero,zero,12
     2c0:	00000310 	cmplti	zero,zero,12
     2c4:	00000318 	cmpnei	zero,zero,12
     2c8:	00000320 	cmpeqi	zero,zero,12
     2cc:	00000328 	cmpgeui	zero,zero,12
     2d0:	00000330 	cmpltui	zero,zero,12
     2d4:	00000338 	rdprs	zero,zero,12
	case 0:
		return ZERO;
     2d8:	00801004 	movi	r2,64
     2dc:	00001906 	br	344 <ToHexa+0xd8>
	case 1:
		return ONE;
     2e0:	00803e44 	movi	r2,249
     2e4:	00001706 	br	344 <ToHexa+0xd8>
	case 2:
		return TWO;
     2e8:	00800904 	movi	r2,36
     2ec:	00001506 	br	344 <ToHexa+0xd8>
	case 3:
		return THREE;
     2f0:	00800c04 	movi	r2,48
     2f4:	00001306 	br	344 <ToHexa+0xd8>
	case 4:
		return FOUR;
     2f8:	00800644 	movi	r2,25
     2fc:	00001106 	br	344 <ToHexa+0xd8>
	case 5:
		return FIVE;
     300:	00800484 	movi	r2,18
     304:	00000f06 	br	344 <ToHexa+0xd8>
	case 6:
		return SIX;
     308:	00800084 	movi	r2,2
     30c:	00000d06 	br	344 <ToHexa+0xd8>
	case 7:
		return SEVEN;
     310:	00801e04 	movi	r2,120
     314:	00000b06 	br	344 <ToHexa+0xd8>
	case 8:
		return EIGHT;
     318:	0005883a 	mov	r2,zero
     31c:	00000906 	br	344 <ToHexa+0xd8>
	case 9:
		return NINE;
     320:	00800604 	movi	r2,24
     324:	00000706 	br	344 <ToHexa+0xd8>
	case 10:
		return F;
     328:	00800384 	movi	r2,14
     32c:	00000506 	br	344 <ToHexa+0xd8>
	case 11:
		return N;
     330:	00801204 	movi	r2,72
     334:	00000306 	br	344 <ToHexa+0xd8>
	case 12:
		return OFF;
     338:	00803fc4 	movi	r2,255
     33c:	00000106 	br	344 <ToHexa+0xd8>
	default:
		return ZERO;
     340:	00801004 	movi	r2,64
	}
}
     344:	e037883a 	mov	sp,fp
     348:	df000017 	ldw	fp,0(sp)
     34c:	dec00104 	addi	sp,sp,4
     350:	f800283a 	ret

00000354 <EncodeHexa>:

/**
 * Takes 4 values and encoded them to be set it in the 7 segments displays
 */
int EncodeHexa(int hex3, int hex2, int hex1, int hex0) {
     354:	defff904 	addi	sp,sp,-28
     358:	dfc00615 	stw	ra,24(sp)
     35c:	df000515 	stw	fp,20(sp)
     360:	dc000415 	stw	r16,16(sp)
     364:	df000504 	addi	fp,sp,20
     368:	e13ffb15 	stw	r4,-20(fp)
     36c:	e17ffc15 	stw	r5,-16(fp)
     370:	e1bffd15 	stw	r6,-12(fp)
     374:	e1fffe15 	stw	r7,-8(fp)
	return (ToHexa(hex3) << 0x18) | (ToHexa(hex2) << 0x10) | (ToHexa(hex1) << 8)
     378:	e13ffb17 	ldw	r4,-20(fp)
     37c:	000026c0 	call	26c <ToHexa>
     380:	1020963a 	slli	r16,r2,24
     384:	e13ffc17 	ldw	r4,-16(fp)
     388:	000026c0 	call	26c <ToHexa>
     38c:	1004943a 	slli	r2,r2,16
     390:	80a0b03a 	or	r16,r16,r2
     394:	e13ffd17 	ldw	r4,-12(fp)
     398:	000026c0 	call	26c <ToHexa>
     39c:	1004923a 	slli	r2,r2,8
     3a0:	80a0b03a 	or	r16,r16,r2
			| (ToHexa(hex0));
     3a4:	e13ffe17 	ldw	r4,-8(fp)
     3a8:	000026c0 	call	26c <ToHexa>

/**
 * Takes 4 values and encoded them to be set it in the 7 segments displays
 */
int EncodeHexa(int hex3, int hex2, int hex1, int hex0) {
	return (ToHexa(hex3) << 0x18) | (ToHexa(hex2) << 0x10) | (ToHexa(hex1) << 8)
     3ac:	8084b03a 	or	r2,r16,r2
			| (ToHexa(hex0));
}
     3b0:	e6ffff04 	addi	sp,fp,-4
     3b4:	dfc00217 	ldw	ra,8(sp)
     3b8:	df000117 	ldw	fp,4(sp)
     3bc:	dc000017 	ldw	r16,0(sp)
     3c0:	dec00304 	addi	sp,sp,12
     3c4:	f800283a 	ret

000003c8 <UpdateTime>:

/**
 * Update the hour
 */
void UpdateTime(void) {
     3c8:	deffff04 	addi	sp,sp,-4
     3cc:	df000015 	stw	fp,0(sp)
     3d0:	d839883a 	mov	fp,sp
	if (actualTime.seconds >= 60) { //45
     3d4:	008000b4 	movhi	r2,2
     3d8:	1085b704 	addi	r2,r2,5852
     3dc:	10800417 	ldw	r2,16(r2)
     3e0:	10800f10 	cmplti	r2,r2,60
     3e4:	10000a1e 	bne	r2,zero,410 <UpdateTime+0x48>
		actualTime.minUnits++;
     3e8:	008000b4 	movhi	r2,2
     3ec:	1085b704 	addi	r2,r2,5852
     3f0:	10800317 	ldw	r2,12(r2)
     3f4:	10c00044 	addi	r3,r2,1
     3f8:	008000b4 	movhi	r2,2
     3fc:	1085b704 	addi	r2,r2,5852
     400:	10c00315 	stw	r3,12(r2)
		actualTime.seconds = 0x0;
     404:	008000b4 	movhi	r2,2
     408:	1085b704 	addi	r2,r2,5852
     40c:	10000415 	stw	zero,16(r2)

	}

	if (actualTime.minUnits >= 10) {
     410:	008000b4 	movhi	r2,2
     414:	1085b704 	addi	r2,r2,5852
     418:	10800317 	ldw	r2,12(r2)
     41c:	10800290 	cmplti	r2,r2,10
     420:	10000a1e 	bne	r2,zero,44c <UpdateTime+0x84>
		actualTime.minTens++;
     424:	008000b4 	movhi	r2,2
     428:	1085b704 	addi	r2,r2,5852
     42c:	10800217 	ldw	r2,8(r2)
     430:	10c00044 	addi	r3,r2,1
     434:	008000b4 	movhi	r2,2
     438:	1085b704 	addi	r2,r2,5852
     43c:	10c00215 	stw	r3,8(r2)
		actualTime.minUnits = 0x0;
     440:	008000b4 	movhi	r2,2
     444:	1085b704 	addi	r2,r2,5852
     448:	10000315 	stw	zero,12(r2)

	}

	if (actualTime.minTens >= 6) {
     44c:	008000b4 	movhi	r2,2
     450:	1085b704 	addi	r2,r2,5852
     454:	10800217 	ldw	r2,8(r2)
     458:	10800190 	cmplti	r2,r2,6
     45c:	10000a1e 	bne	r2,zero,488 <UpdateTime+0xc0>
		actualTime.hourUnits++;
     460:	008000b4 	movhi	r2,2
     464:	1085b704 	addi	r2,r2,5852
     468:	10800117 	ldw	r2,4(r2)
     46c:	10c00044 	addi	r3,r2,1
     470:	008000b4 	movhi	r2,2
     474:	1085b704 	addi	r2,r2,5852
     478:	10c00115 	stw	r3,4(r2)
		actualTime.minTens = 0x0;
     47c:	008000b4 	movhi	r2,2
     480:	1085b704 	addi	r2,r2,5852
     484:	10000215 	stw	zero,8(r2)

	}

	if (actualTime.hourUnits >= 10) {
     488:	008000b4 	movhi	r2,2
     48c:	1085b704 	addi	r2,r2,5852
     490:	10800117 	ldw	r2,4(r2)
     494:	10800290 	cmplti	r2,r2,10
     498:	10000a1e 	bne	r2,zero,4c4 <UpdateTime+0xfc>
		actualTime.hourTens++;
     49c:	008000b4 	movhi	r2,2
     4a0:	1085b704 	addi	r2,r2,5852
     4a4:	10800017 	ldw	r2,0(r2)
     4a8:	10c00044 	addi	r3,r2,1
     4ac:	008000b4 	movhi	r2,2
     4b0:	1085b704 	addi	r2,r2,5852
     4b4:	10c00015 	stw	r3,0(r2)
		actualTime.hourUnits = 0x0;
     4b8:	008000b4 	movhi	r2,2
     4bc:	1085b704 	addi	r2,r2,5852
     4c0:	10000115 	stw	zero,4(r2)

	}

	if (actualTime.hourTens >= 2 && actualTime.hourUnits >= 4) {
     4c4:	008000b4 	movhi	r2,2
     4c8:	1085b704 	addi	r2,r2,5852
     4cc:	10800017 	ldw	r2,0(r2)
     4d0:	10800090 	cmplti	r2,r2,2
     4d4:	10000b1e 	bne	r2,zero,504 <UpdateTime+0x13c>
     4d8:	008000b4 	movhi	r2,2
     4dc:	1085b704 	addi	r2,r2,5852
     4e0:	10800117 	ldw	r2,4(r2)
     4e4:	10800110 	cmplti	r2,r2,4
     4e8:	1000061e 	bne	r2,zero,504 <UpdateTime+0x13c>
		actualTime.hourTens = 0x0;
     4ec:	008000b4 	movhi	r2,2
     4f0:	1085b704 	addi	r2,r2,5852
     4f4:	10000015 	stw	zero,0(r2)
		actualTime.hourUnits = 0x0;
     4f8:	008000b4 	movhi	r2,2
     4fc:	1085b704 	addi	r2,r2,5852
     500:	10000115 	stw	zero,4(r2)

	}

}
     504:	0001883a 	nop
     508:	e037883a 	mov	sp,fp
     50c:	df000017 	ldw	fp,0(sp)
     510:	dec00104 	addi	sp,sp,4
     514:	f800283a 	ret

00000518 <UpdateTimeDisplays>:

/*
 * Refresh the time on the displays
 */
void UpdateTimeDisplays(void) {
     518:	defffd04 	addi	sp,sp,-12
     51c:	dfc00215 	stw	ra,8(sp)
     520:	df000115 	stw	fp,4(sp)
     524:	dc000015 	stw	r16,0(sp)
     528:	df000104 	addi	fp,sp,4
	if (settingAlarm) {
     52c:	d0a01343 	ldbu	r2,-32691(gp)
     530:	10803fcc 	andi	r2,r2,255
     534:	10001426 	beq	r2,zero,588 <UpdateTimeDisplays+0x70>
		*displays = EncodeHexa(alarmTime.hourTens, alarmTime.hourUnits,
     538:	d4200017 	ldw	r16,-32768(gp)
     53c:	008000b4 	movhi	r2,2
     540:	1085b204 	addi	r2,r2,5832
     544:	10c00017 	ldw	r3,0(r2)
     548:	008000b4 	movhi	r2,2
     54c:	1085b204 	addi	r2,r2,5832
     550:	11000117 	ldw	r4,4(r2)
     554:	008000b4 	movhi	r2,2
     558:	1085b204 	addi	r2,r2,5832
     55c:	11400217 	ldw	r5,8(r2)
     560:	008000b4 	movhi	r2,2
     564:	1085b204 	addi	r2,r2,5832
     568:	10800317 	ldw	r2,12(r2)
     56c:	100f883a 	mov	r7,r2
     570:	280d883a 	mov	r6,r5
     574:	200b883a 	mov	r5,r4
     578:	1809883a 	mov	r4,r3
     57c:	00003540 	call	354 <EncodeHexa>
     580:	80800015 	stw	r2,0(r16)
	} else {
		*displays = EncodeHexa(actualTime.hourTens, actualTime.hourUnits,
				actualTime.minTens, actualTime.minUnits);

	}
}
     584:	00002906 	br	62c <UpdateTimeDisplays+0x114>
void UpdateTimeDisplays(void) {
	if (settingAlarm) {
		*displays = EncodeHexa(alarmTime.hourTens, alarmTime.hourUnits,
				alarmTime.minTens, alarmTime.minUnits);

	} else if (switchingAlarm) {
     588:	d0a01303 	ldbu	r2,-32692(gp)
     58c:	10803fcc 	andi	r2,r2,255
     590:	10001326 	beq	r2,zero,5e0 <UpdateTimeDisplays+0xc8>
		if (alarmStatus) {
     594:	d0a01383 	ldbu	r2,-32690(gp)
     598:	10803fcc 	andi	r2,r2,255
     59c:	10000826 	beq	r2,zero,5c0 <UpdateTimeDisplays+0xa8>
			// Put ON on the displays
			*displays = EncodeHexa(12, 12, 0, 11);
     5a0:	d4200017 	ldw	r16,-32768(gp)
     5a4:	01c002c4 	movi	r7,11
     5a8:	000d883a 	mov	r6,zero
     5ac:	01400304 	movi	r5,12
     5b0:	01000304 	movi	r4,12
     5b4:	00003540 	call	354 <EncodeHexa>
     5b8:	80800015 	stw	r2,0(r16)
	} else {
		*displays = EncodeHexa(actualTime.hourTens, actualTime.hourUnits,
				actualTime.minTens, actualTime.minUnits);

	}
}
     5bc:	00001b06 	br	62c <UpdateTimeDisplays+0x114>
			// Put ON on the displays
			*displays = EncodeHexa(12, 12, 0, 11);

		} else {
			// Put OFF on the displays
			*displays = EncodeHexa(12, 0, 10, 10);
     5c0:	d4200017 	ldw	r16,-32768(gp)
     5c4:	01c00284 	movi	r7,10
     5c8:	01800284 	movi	r6,10
     5cc:	000b883a 	mov	r5,zero
     5d0:	01000304 	movi	r4,12
     5d4:	00003540 	call	354 <EncodeHexa>
     5d8:	80800015 	stw	r2,0(r16)
	} else {
		*displays = EncodeHexa(actualTime.hourTens, actualTime.hourUnits,
				actualTime.minTens, actualTime.minUnits);

	}
}
     5dc:	00001306 	br	62c <UpdateTimeDisplays+0x114>
			*displays = EncodeHexa(12, 0, 10, 10);

		}

	} else {
		*displays = EncodeHexa(actualTime.hourTens, actualTime.hourUnits,
     5e0:	d4200017 	ldw	r16,-32768(gp)
     5e4:	008000b4 	movhi	r2,2
     5e8:	1085b704 	addi	r2,r2,5852
     5ec:	10c00017 	ldw	r3,0(r2)
     5f0:	008000b4 	movhi	r2,2
     5f4:	1085b704 	addi	r2,r2,5852
     5f8:	11000117 	ldw	r4,4(r2)
     5fc:	008000b4 	movhi	r2,2
     600:	1085b704 	addi	r2,r2,5852
     604:	11400217 	ldw	r5,8(r2)
     608:	008000b4 	movhi	r2,2
     60c:	1085b704 	addi	r2,r2,5852
     610:	10800317 	ldw	r2,12(r2)
     614:	100f883a 	mov	r7,r2
     618:	280d883a 	mov	r6,r5
     61c:	200b883a 	mov	r5,r4
     620:	1809883a 	mov	r4,r3
     624:	00003540 	call	354 <EncodeHexa>
     628:	80800015 	stw	r2,0(r16)
				actualTime.minTens, actualTime.minUnits);

	}
}
     62c:	0001883a 	nop
     630:	e6ffff04 	addi	sp,fp,-4
     634:	dfc00217 	ldw	ra,8(sp)
     638:	df000117 	ldw	fp,4(sp)
     63c:	dc000017 	ldw	r16,0(sp)
     640:	dec00304 	addi	sp,sp,12
     644:	f800283a 	ret

00000648 <HandlerTimerCoreInterrupt>:

/**
 * Handler for the Timer Core interruptions
 */
static void HandlerTimerCoreInterrupt(void* context) {
     648:	defffd04 	addi	sp,sp,-12
     64c:	dfc00215 	stw	ra,8(sp)
     650:	df000115 	stw	fp,4(sp)
     654:	df000104 	addi	fp,sp,4
     658:	e13fff15 	stw	r4,-4(fp)
	*timerCoreStatus = 0; // Resets the status
     65c:	d0a00517 	ldw	r2,-32748(gp)
     660:	10000005 	stb	zero,0(r2)
	actualTime.seconds++;
     664:	008000b4 	movhi	r2,2
     668:	1085b704 	addi	r2,r2,5852
     66c:	10800417 	ldw	r2,16(r2)
     670:	10c00044 	addi	r3,r2,1
     674:	008000b4 	movhi	r2,2
     678:	1085b704 	addi	r2,r2,5852
     67c:	10c00415 	stw	r3,16(r2)
	UpdateTime();
     680:	00003c80 	call	3c8 <UpdateTime>

}
     684:	0001883a 	nop
     688:	e037883a 	mov	sp,fp
     68c:	dfc00117 	ldw	ra,4(sp)
     690:	df000017 	ldw	fp,0(sp)
     694:	dec00204 	addi	sp,sp,8
     698:	f800283a 	ret

0000069c <SetupTimerCore>:

/**
 * Setup the Timer Core
 */
static void SetupTimerCore(void) {
     69c:	defffa04 	addi	sp,sp,-24
     6a0:	dfc00515 	stw	ra,20(sp)
     6a4:	df000415 	stw	fp,16(sp)
     6a8:	df000404 	addi	fp,sp,16
	// Getting the address
	uchar *timerCoreControl = (uchar *) (TIMERCORE_BASE + 0x4);
     6ac:	008000f4 	movhi	r2,3
     6b0:	10a40904 	addi	r2,r2,-28636
     6b4:	e0bffd15 	stw	r2,-12(fp)
	uchar *timerCoreMask = (uchar *) (TIMERCORE_BASE + 0x8);
     6b8:	008000f4 	movhi	r2,3
     6bc:	10a40a04 	addi	r2,r2,-28632
     6c0:	e0bffe15 	stw	r2,-8(fp)
	uchar *timerCoreEdgeCap = (uchar *) (TIMERCORE_BASE + 0xC);
     6c4:	008000f4 	movhi	r2,3
     6c8:	10a40b04 	addi	r2,r2,-28628
     6cc:	e0bfff15 	stw	r2,-4(fp)

	// Sets the interrupt handler
	alt_ic_isr_register(TIMERCORE_IRQ_INTERRUPT_CONTROLLER_ID,
     6d0:	d8000015 	stw	zero,0(sp)
     6d4:	000f883a 	mov	r7,zero
     6d8:	01800034 	movhi	r6,0
     6dc:	31819204 	addi	r6,r6,1608
     6e0:	000b883a 	mov	r5,zero
     6e4:	0009883a 	mov	r4,zero
     6e8:	0000bf40 	call	bf4 <alt_ic_isr_register>
	TIMERCORE_IRQ, HandlerTimerCoreInterrupt, NULL, 0x0);

	// Starts the timer
	*timerCoreMask = 0x0;
     6ec:	e0bffe17 	ldw	r2,-8(fp)
     6f0:	10000005 	stb	zero,0(r2)
	*timerCoreEdgeCap = 0x4;
     6f4:	e0bfff17 	ldw	r2,-4(fp)
     6f8:	00c00104 	movi	r3,4
     6fc:	10c00005 	stb	r3,0(r2)
	*timerCoreControl = 0x0007;
     700:	e0bffd17 	ldw	r2,-12(fp)
     704:	00c001c4 	movi	r3,7
     708:	10c00005 	stb	r3,0(r2)
	*timerCoreStatus = 0;
     70c:	d0a00517 	ldw	r2,-32748(gp)
     710:	10000005 	stb	zero,0(r2)

}
     714:	0001883a 	nop
     718:	e037883a 	mov	sp,fp
     71c:	dfc00117 	ldw	ra,4(sp)
     720:	df000017 	ldw	fp,0(sp)
     724:	dec00204 	addi	sp,sp,8
     728:	f800283a 	ret

0000072c <LedsUpdate>:

/**
 * Animates the alarm notification
 */
void LedsUpdate(void){
     72c:	deffff04 	addi	sp,sp,-4
     730:	df000015 	stw	fp,0(sp)
     734:	d839883a 	mov	fp,sp
	*leds = ledsValue;
     738:	d0a00417 	ldw	r2,-32752(gp)
     73c:	d0e00617 	ldw	r3,-32744(gp)
     740:	10c00015 	stw	r3,0(r2)
	if(left){
     744:	d0a00703 	ldbu	r2,-32740(gp)
     748:	10803fcc 	andi	r2,r2,255
     74c:	10000726 	beq	r2,zero,76c <LedsUpdate+0x40>
		ledsValue <<= 0x1;
     750:	d0a00617 	ldw	r2,-32744(gp)
     754:	1085883a 	add	r2,r2,r2
     758:	d0a00615 	stw	r2,-32744(gp)
		counter++;
     75c:	d0a01417 	ldw	r2,-32688(gp)
     760:	10800044 	addi	r2,r2,1
     764:	d0a01415 	stw	r2,-32688(gp)
     768:	00000606 	br	784 <LedsUpdate+0x58>

	} else {
		ledsValue >>= 0x1;
     76c:	d0a00617 	ldw	r2,-32744(gp)
     770:	1005d07a 	srai	r2,r2,1
     774:	d0a00615 	stw	r2,-32744(gp)
		counter--;
     778:	d0a01417 	ldw	r2,-32688(gp)
     77c:	10bfffc4 	addi	r2,r2,-1
     780:	d0a01415 	stw	r2,-32688(gp)

	}

	if (counter  > 8){
     784:	d0a01417 	ldw	r2,-32688(gp)
     788:	10800250 	cmplti	r2,r2,9
     78c:	1000021e 	bne	r2,zero,798 <LedsUpdate+0x6c>
		left = false;
     790:	d0200705 	stb	zero,-32740(gp)
	} else if (counter < 1) {
		left = true;

	}

}
     794:	00000406 	br	7a8 <LedsUpdate+0x7c>
	}

	if (counter  > 8){
		left = false;

	} else if (counter < 1) {
     798:	d0a01417 	ldw	r2,-32688(gp)
     79c:	00800216 	blt	zero,r2,7a8 <LedsUpdate+0x7c>
		left = true;
     7a0:	00800044 	movi	r2,1
     7a4:	d0a00705 	stb	r2,-32740(gp)

	}

}
     7a8:	0001883a 	nop
     7ac:	e037883a 	mov	sp,fp
     7b0:	df000017 	ldw	fp,0(sp)
     7b4:	dec00104 	addi	sp,sp,4
     7b8:	f800283a 	ret

000007bc <main>:

/**
 * Main function of the clock
 */
int main() {
     7bc:	defffe04 	addi	sp,sp,-8
     7c0:	dfc00115 	stw	ra,4(sp)
     7c4:	df000015 	stw	fp,0(sp)
     7c8:	d839883a 	mov	fp,sp
	*gpioOut = 0x00;
     7cc:	d0a00317 	ldw	r2,-32756(gp)
     7d0:	10000015 	stw	zero,0(r2)
	SetupTimerCore();
     7d4:	000069c0 	call	69c <SetupTimerCore>
	*leds = 0x0;
     7d8:	d0a00417 	ldw	r2,-32752(gp)
     7dc:	10000015 	stw	zero,0(r2)

	while (1) {
		if (*switches == 0x1) {
     7e0:	d0a00117 	ldw	r2,-32764(gp)
     7e4:	10800017 	ldw	r2,0(r2)
     7e8:	10800058 	cmpnei	r2,r2,1
     7ec:	1000541e 	bne	r2,zero,940 <main+0x184>
			*leds = 0x1;
     7f0:	d0a00417 	ldw	r2,-32752(gp)
     7f4:	00c00044 	movi	r3,1
     7f8:	10c00015 	stw	r3,0(r2)
			if (*buttons == 0x1) {
     7fc:	d0a00217 	ldw	r2,-32760(gp)
     800:	10800017 	ldw	r2,0(r2)
     804:	10800058 	cmpnei	r2,r2,1
     808:	1000081e 	bne	r2,zero,82c <main+0x70>
				actualTime.hourUnits++;
     80c:	008000b4 	movhi	r2,2
     810:	1085b704 	addi	r2,r2,5852
     814:	10800117 	ldw	r2,4(r2)
     818:	10c00044 	addi	r3,r2,1
     81c:	008000b4 	movhi	r2,2
     820:	1085b704 	addi	r2,r2,5852
     824:	10c00115 	stw	r3,4(r2)
     828:	00000b06 	br	858 <main+0x9c>

			} else if (*buttons == 0x2) {
     82c:	d0a00217 	ldw	r2,-32760(gp)
     830:	10800017 	ldw	r2,0(r2)
     834:	10800098 	cmpnei	r2,r2,2
     838:	1000071e 	bne	r2,zero,858 <main+0x9c>
				actualTime.minUnits++;
     83c:	008000b4 	movhi	r2,2
     840:	1085b704 	addi	r2,r2,5852
     844:	10800317 	ldw	r2,12(r2)
     848:	10c00044 	addi	r3,r2,1
     84c:	008000b4 	movhi	r2,2
     850:	1085b704 	addi	r2,r2,5852
     854:	10c00315 	stw	r3,12(r2)
			}

			if (actualTime.minUnits >= 10) {
     858:	008000b4 	movhi	r2,2
     85c:	1085b704 	addi	r2,r2,5852
     860:	10800317 	ldw	r2,12(r2)
     864:	10800290 	cmplti	r2,r2,10
     868:	10000a1e 	bne	r2,zero,894 <main+0xd8>
				actualTime.minTens++;
     86c:	008000b4 	movhi	r2,2
     870:	1085b704 	addi	r2,r2,5852
     874:	10800217 	ldw	r2,8(r2)
     878:	10c00044 	addi	r3,r2,1
     87c:	008000b4 	movhi	r2,2
     880:	1085b704 	addi	r2,r2,5852
     884:	10c00215 	stw	r3,8(r2)
				actualTime.minUnits = 0x0;
     888:	008000b4 	movhi	r2,2
     88c:	1085b704 	addi	r2,r2,5852
     890:	10000315 	stw	zero,12(r2)
			}

			if (actualTime.minTens >= 6) {
     894:	008000b4 	movhi	r2,2
     898:	1085b704 	addi	r2,r2,5852
     89c:	10800217 	ldw	r2,8(r2)
     8a0:	10800190 	cmplti	r2,r2,6
     8a4:	1000031e 	bne	r2,zero,8b4 <main+0xf8>
				actualTime.minTens = 0x0;
     8a8:	008000b4 	movhi	r2,2
     8ac:	1085b704 	addi	r2,r2,5852
     8b0:	10000215 	stw	zero,8(r2)
			}

			if (actualTime.hourUnits >= 10) {
     8b4:	008000b4 	movhi	r2,2
     8b8:	1085b704 	addi	r2,r2,5852
     8bc:	10800117 	ldw	r2,4(r2)
     8c0:	10800290 	cmplti	r2,r2,10
     8c4:	10000a1e 	bne	r2,zero,8f0 <main+0x134>
				actualTime.hourTens++;
     8c8:	008000b4 	movhi	r2,2
     8cc:	1085b704 	addi	r2,r2,5852
     8d0:	10800017 	ldw	r2,0(r2)
     8d4:	10c00044 	addi	r3,r2,1
     8d8:	008000b4 	movhi	r2,2
     8dc:	1085b704 	addi	r2,r2,5852
     8e0:	10c00015 	stw	r3,0(r2)
				actualTime.hourUnits = 0x0;
     8e4:	008000b4 	movhi	r2,2
     8e8:	1085b704 	addi	r2,r2,5852
     8ec:	10000115 	stw	zero,4(r2)
			}

			if (actualTime.hourTens >= 2 && actualTime.hourUnits >= 4) {
     8f0:	008000b4 	movhi	r2,2
     8f4:	1085b704 	addi	r2,r2,5852
     8f8:	10800017 	ldw	r2,0(r2)
     8fc:	10800090 	cmplti	r2,r2,2
     900:	10000b1e 	bne	r2,zero,930 <main+0x174>
     904:	008000b4 	movhi	r2,2
     908:	1085b704 	addi	r2,r2,5852
     90c:	10800117 	ldw	r2,4(r2)
     910:	10800110 	cmplti	r2,r2,4
     914:	1000061e 	bne	r2,zero,930 <main+0x174>
				actualTime.hourTens = 0x0;
     918:	008000b4 	movhi	r2,2
     91c:	1085b704 	addi	r2,r2,5852
     920:	10000015 	stw	zero,0(r2)
				actualTime.hourUnits = 0x0;
     924:	008000b4 	movhi	r2,2
     928:	1085b704 	addi	r2,r2,5852
     92c:	10000115 	stw	zero,4(r2)
			}
			usleep(150000); // To avoid multiples increments
     930:	010000b4 	movhi	r4,2
     934:	21127c04 	addi	r4,r4,18928
     938:	0000ffc0 	call	ffc <usleep>
     93c:	0000a906 	br	be4 <main+0x428>

		} else if (*switches == 0x2) {
     940:	d0a00117 	ldw	r2,-32764(gp)
     944:	10800017 	ldw	r2,0(r2)
     948:	10800098 	cmpnei	r2,r2,2
     94c:	1000561e 	bne	r2,zero,aa8 <main+0x2ec>
			*leds = 0x2;
     950:	d0a00417 	ldw	r2,-32752(gp)
     954:	00c00084 	movi	r3,2
     958:	10c00015 	stw	r3,0(r2)
			settingAlarm = true;
     95c:	00800044 	movi	r2,1
     960:	d0a01345 	stb	r2,-32691(gp)
			if (*buttons == 0x1) {
     964:	d0a00217 	ldw	r2,-32760(gp)
     968:	10800017 	ldw	r2,0(r2)
     96c:	10800058 	cmpnei	r2,r2,1
     970:	1000081e 	bne	r2,zero,994 <main+0x1d8>
				alarmTime.hourUnits++;
     974:	008000b4 	movhi	r2,2
     978:	1085b204 	addi	r2,r2,5832
     97c:	10800117 	ldw	r2,4(r2)
     980:	10c00044 	addi	r3,r2,1
     984:	008000b4 	movhi	r2,2
     988:	1085b204 	addi	r2,r2,5832
     98c:	10c00115 	stw	r3,4(r2)
     990:	00000b06 	br	9c0 <main+0x204>

			} else if (*buttons == 0x2) {
     994:	d0a00217 	ldw	r2,-32760(gp)
     998:	10800017 	ldw	r2,0(r2)
     99c:	10800098 	cmpnei	r2,r2,2
     9a0:	1000071e 	bne	r2,zero,9c0 <main+0x204>
				alarmTime.minUnits++;
     9a4:	008000b4 	movhi	r2,2
     9a8:	1085b204 	addi	r2,r2,5832
     9ac:	10800317 	ldw	r2,12(r2)
     9b0:	10c00044 	addi	r3,r2,1
     9b4:	008000b4 	movhi	r2,2
     9b8:	1085b204 	addi	r2,r2,5832
     9bc:	10c00315 	stw	r3,12(r2)

			}

			if (alarmTime.minUnits >= 10) {
     9c0:	008000b4 	movhi	r2,2
     9c4:	1085b204 	addi	r2,r2,5832
     9c8:	10800317 	ldw	r2,12(r2)
     9cc:	10800290 	cmplti	r2,r2,10
     9d0:	10000a1e 	bne	r2,zero,9fc <main+0x240>
				alarmTime.minTens++;
     9d4:	008000b4 	movhi	r2,2
     9d8:	1085b204 	addi	r2,r2,5832
     9dc:	10800217 	ldw	r2,8(r2)
     9e0:	10c00044 	addi	r3,r2,1
     9e4:	008000b4 	movhi	r2,2
     9e8:	1085b204 	addi	r2,r2,5832
     9ec:	10c00215 	stw	r3,8(r2)
				alarmTime.minUnits = 0x0;
     9f0:	008000b4 	movhi	r2,2
     9f4:	1085b204 	addi	r2,r2,5832
     9f8:	10000315 	stw	zero,12(r2)

			}

			if (alarmTime.minTens >= 6) {
     9fc:	008000b4 	movhi	r2,2
     a00:	1085b204 	addi	r2,r2,5832
     a04:	10800217 	ldw	r2,8(r2)
     a08:	10800190 	cmplti	r2,r2,6
     a0c:	1000031e 	bne	r2,zero,a1c <main+0x260>
				alarmTime.minTens = 0x0;
     a10:	008000b4 	movhi	r2,2
     a14:	1085b204 	addi	r2,r2,5832
     a18:	10000215 	stw	zero,8(r2)

			}

			if (alarmTime.hourUnits >= 10) {
     a1c:	008000b4 	movhi	r2,2
     a20:	1085b204 	addi	r2,r2,5832
     a24:	10800117 	ldw	r2,4(r2)
     a28:	10800290 	cmplti	r2,r2,10
     a2c:	10000a1e 	bne	r2,zero,a58 <main+0x29c>
				alarmTime.hourTens++;
     a30:	008000b4 	movhi	r2,2
     a34:	1085b204 	addi	r2,r2,5832
     a38:	10800017 	ldw	r2,0(r2)
     a3c:	10c00044 	addi	r3,r2,1
     a40:	008000b4 	movhi	r2,2
     a44:	1085b204 	addi	r2,r2,5832
     a48:	10c00015 	stw	r3,0(r2)
				alarmTime.hourUnits = 0x0;
     a4c:	008000b4 	movhi	r2,2
     a50:	1085b204 	addi	r2,r2,5832
     a54:	10000115 	stw	zero,4(r2)

			}

			if (alarmTime.hourTens >= 2 && alarmTime.hourUnits >= 4) {
     a58:	008000b4 	movhi	r2,2
     a5c:	1085b204 	addi	r2,r2,5832
     a60:	10800017 	ldw	r2,0(r2)
     a64:	10800090 	cmplti	r2,r2,2
     a68:	10000b1e 	bne	r2,zero,a98 <main+0x2dc>
     a6c:	008000b4 	movhi	r2,2
     a70:	1085b204 	addi	r2,r2,5832
     a74:	10800117 	ldw	r2,4(r2)
     a78:	10800110 	cmplti	r2,r2,4
     a7c:	1000061e 	bne	r2,zero,a98 <main+0x2dc>
				alarmTime.hourTens = 0x0;
     a80:	008000b4 	movhi	r2,2
     a84:	1085b204 	addi	r2,r2,5832
     a88:	10000015 	stw	zero,0(r2)
				alarmTime.hourUnits = 0x0;
     a8c:	008000b4 	movhi	r2,2
     a90:	1085b204 	addi	r2,r2,5832
     a94:	10000115 	stw	zero,4(r2)

			}
			usleep(150000); // To avoid multiples increments
     a98:	010000b4 	movhi	r4,2
     a9c:	21127c04 	addi	r4,r4,18928
     aa0:	0000ffc0 	call	ffc <usleep>
     aa4:	00004f06 	br	be4 <main+0x428>

		} else if (*switches == 0x3) {
     aa8:	d0a00117 	ldw	r2,-32764(gp)
     aac:	10800017 	ldw	r2,0(r2)
     ab0:	108000d8 	cmpnei	r2,r2,3
     ab4:	1000141e 	bne	r2,zero,b08 <main+0x34c>
			*leds = 0x3;
     ab8:	d0a00417 	ldw	r2,-32752(gp)
     abc:	00c000c4 	movi	r3,3
     ac0:	10c00015 	stw	r3,0(r2)
			switchingAlarm = true;
     ac4:	00800044 	movi	r2,1
     ac8:	d0a01305 	stb	r2,-32692(gp)
			if (*buttons == 0x2) {
     acc:	d0a00217 	ldw	r2,-32760(gp)
     ad0:	10800017 	ldw	r2,0(r2)
     ad4:	10800098 	cmpnei	r2,r2,2
     ad8:	1000071e 	bne	r2,zero,af8 <main+0x33c>
				if (alarmStatus) {
     adc:	d0a01383 	ldbu	r2,-32690(gp)
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	10000226 	beq	r2,zero,af0 <main+0x334>
					alarmStatus = false;
     ae8:	d0201385 	stb	zero,-32690(gp)
     aec:	00000206 	br	af8 <main+0x33c>

				} else {
					alarmStatus = true;
     af0:	00800044 	movi	r2,1
     af4:	d0a01385 	stb	r2,-32690(gp)

				}
			}
			usleep(150000); // To avoid multiples changes
     af8:	010000b4 	movhi	r4,2
     afc:	21127c04 	addi	r4,r4,18928
     b00:	0000ffc0 	call	ffc <usleep>
     b04:	00003706 	br	be4 <main+0x428>

		} else {
			if (alarmStatus) {
     b08:	d0a01383 	ldbu	r2,-32690(gp)
     b0c:	10803fcc 	andi	r2,r2,255
     b10:	10003026 	beq	r2,zero,bd4 <main+0x418>
				if (alarmTime.hourTens == actualTime.hourTens
     b14:	008000b4 	movhi	r2,2
     b18:	1085b204 	addi	r2,r2,5832
     b1c:	10c00017 	ldw	r3,0(r2)
     b20:	008000b4 	movhi	r2,2
     b24:	1085b704 	addi	r2,r2,5852
     b28:	10800017 	ldw	r2,0(r2)
     b2c:	1880291e 	bne	r3,r2,bd4 <main+0x418>
						&& alarmTime.hourUnits == actualTime.hourUnits
     b30:	008000b4 	movhi	r2,2
     b34:	1085b204 	addi	r2,r2,5832
     b38:	10c00117 	ldw	r3,4(r2)
     b3c:	008000b4 	movhi	r2,2
     b40:	1085b704 	addi	r2,r2,5852
     b44:	10800117 	ldw	r2,4(r2)
     b48:	1880221e 	bne	r3,r2,bd4 <main+0x418>
						&& alarmTime.minTens == actualTime.minTens
     b4c:	008000b4 	movhi	r2,2
     b50:	1085b204 	addi	r2,r2,5832
     b54:	10c00217 	ldw	r3,8(r2)
     b58:	008000b4 	movhi	r2,2
     b5c:	1085b704 	addi	r2,r2,5852
     b60:	10800217 	ldw	r2,8(r2)
     b64:	18801b1e 	bne	r3,r2,bd4 <main+0x418>
						&& alarmTime.minUnits == actualTime.minUnits) {
     b68:	008000b4 	movhi	r2,2
     b6c:	1085b204 	addi	r2,r2,5832
     b70:	10c00317 	ldw	r3,12(r2)
     b74:	008000b4 	movhi	r2,2
     b78:	1085b704 	addi	r2,r2,5852
     b7c:	10800317 	ldw	r2,12(r2)
     b80:	1880141e 	bne	r3,r2,bd4 <main+0x418>
					// Make the sound
					*gpioOut = 0x01;
     b84:	d0a00317 	ldw	r2,-32756(gp)
     b88:	00c00044 	movi	r3,1
     b8c:	10c00015 	stw	r3,0(r2)
					LedsUpdate();
     b90:	000072c0 	call	72c <LedsUpdate>
					usleep(150000);
     b94:	010000b4 	movhi	r4,2
     b98:	21127c04 	addi	r4,r4,18928
     b9c:	0000ffc0 	call	ffc <usleep>
					*gpioOut = 0x00;
     ba0:	d0a00317 	ldw	r2,-32756(gp)
     ba4:	10000015 	stw	zero,0(r2)
					LedsUpdate();
     ba8:	000072c0 	call	72c <LedsUpdate>
					usleep(80000);
     bac:	01000074 	movhi	r4,1
     bb0:	210e2004 	addi	r4,r4,14464
     bb4:	0000ffc0 	call	ffc <usleep>
					// To disable the alarm
					if (*buttons == 0x2) {
     bb8:	d0a00217 	ldw	r2,-32760(gp)
     bbc:	10800017 	ldw	r2,0(r2)
     bc0:	10800098 	cmpnei	r2,r2,2
     bc4:	1000031e 	bne	r2,zero,bd4 <main+0x418>
						alarmStatus = false;
     bc8:	d0201385 	stb	zero,-32690(gp)
						*leds = 0;
     bcc:	d0a00417 	ldw	r2,-32752(gp)
     bd0:	10000015 	stw	zero,0(r2)

					}
				}
			} // Alarm not set
			settingAlarm = false;
     bd4:	d0201345 	stb	zero,-32691(gp)
			switchingAlarm = false;
     bd8:	d0201305 	stb	zero,-32692(gp)
			*leds = 0;
     bdc:	d0a00417 	ldw	r2,-32752(gp)
     be0:	10000015 	stw	zero,0(r2)

		}
		UpdateTimeDisplays();
     be4:	00005180 	call	518 <UpdateTimeDisplays>
		usleep(1000);
     be8:	0100fa04 	movi	r4,1000
     bec:	0000ffc0 	call	ffc <usleep>
	}
     bf0:	003efb06 	br	7e0 <main+0x24>

00000bf4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
     bf4:	defff904 	addi	sp,sp,-28
     bf8:	dfc00615 	stw	ra,24(sp)
     bfc:	df000515 	stw	fp,20(sp)
     c00:	df000504 	addi	fp,sp,20
     c04:	e13ffc15 	stw	r4,-16(fp)
     c08:	e17ffd15 	stw	r5,-12(fp)
     c0c:	e1bffe15 	stw	r6,-8(fp)
     c10:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
     c14:	e0800217 	ldw	r2,8(fp)
     c18:	d8800015 	stw	r2,0(sp)
     c1c:	e1ffff17 	ldw	r7,-4(fp)
     c20:	e1bffe17 	ldw	r6,-8(fp)
     c24:	e17ffd17 	ldw	r5,-12(fp)
     c28:	e13ffc17 	ldw	r4,-16(fp)
     c2c:	0000da40 	call	da4 <alt_iic_isr_register>
}  
     c30:	e037883a 	mov	sp,fp
     c34:	dfc00117 	ldw	ra,4(sp)
     c38:	df000017 	ldw	fp,0(sp)
     c3c:	dec00204 	addi	sp,sp,8
     c40:	f800283a 	ret

00000c44 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
     c44:	defff904 	addi	sp,sp,-28
     c48:	df000615 	stw	fp,24(sp)
     c4c:	df000604 	addi	fp,sp,24
     c50:	e13ffe15 	stw	r4,-8(fp)
     c54:	e17fff15 	stw	r5,-4(fp)
     c58:	e0bfff17 	ldw	r2,-4(fp)
     c5c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     c60:	0005303a 	rdctl	r2,status
     c64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     c68:	e0fffb17 	ldw	r3,-20(fp)
     c6c:	00bfff84 	movi	r2,-2
     c70:	1884703a 	and	r2,r3,r2
     c74:	1001703a 	wrctl	status,r2
  
  return context;
     c78:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     c7c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
     c80:	00c00044 	movi	r3,1
     c84:	e0bffa17 	ldw	r2,-24(fp)
     c88:	1884983a 	sll	r2,r3,r2
     c8c:	1007883a 	mov	r3,r2
     c90:	d0a01517 	ldw	r2,-32684(gp)
     c94:	1884b03a 	or	r2,r3,r2
     c98:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     c9c:	d0a01517 	ldw	r2,-32684(gp)
     ca0:	100170fa 	wrctl	ienable,r2
     ca4:	e0bffc17 	ldw	r2,-16(fp)
     ca8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     cac:	e0bffd17 	ldw	r2,-12(fp)
     cb0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     cb4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
     cb8:	0001883a 	nop
}
     cbc:	e037883a 	mov	sp,fp
     cc0:	df000017 	ldw	fp,0(sp)
     cc4:	dec00104 	addi	sp,sp,4
     cc8:	f800283a 	ret

00000ccc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
     ccc:	defff904 	addi	sp,sp,-28
     cd0:	df000615 	stw	fp,24(sp)
     cd4:	df000604 	addi	fp,sp,24
     cd8:	e13ffe15 	stw	r4,-8(fp)
     cdc:	e17fff15 	stw	r5,-4(fp)
     ce0:	e0bfff17 	ldw	r2,-4(fp)
     ce4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     ce8:	0005303a 	rdctl	r2,status
     cec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     cf0:	e0fffb17 	ldw	r3,-20(fp)
     cf4:	00bfff84 	movi	r2,-2
     cf8:	1884703a 	and	r2,r3,r2
     cfc:	1001703a 	wrctl	status,r2
  
  return context;
     d00:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     d04:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
     d08:	00c00044 	movi	r3,1
     d0c:	e0bffa17 	ldw	r2,-24(fp)
     d10:	1884983a 	sll	r2,r3,r2
     d14:	0084303a 	nor	r2,zero,r2
     d18:	1007883a 	mov	r3,r2
     d1c:	d0a01517 	ldw	r2,-32684(gp)
     d20:	1884703a 	and	r2,r3,r2
     d24:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     d28:	d0a01517 	ldw	r2,-32684(gp)
     d2c:	100170fa 	wrctl	ienable,r2
     d30:	e0bffc17 	ldw	r2,-16(fp)
     d34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     d38:	e0bffd17 	ldw	r2,-12(fp)
     d3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     d40:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
     d44:	0001883a 	nop
}
     d48:	e037883a 	mov	sp,fp
     d4c:	df000017 	ldw	fp,0(sp)
     d50:	dec00104 	addi	sp,sp,4
     d54:	f800283a 	ret

00000d58 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
     d58:	defffc04 	addi	sp,sp,-16
     d5c:	df000315 	stw	fp,12(sp)
     d60:	df000304 	addi	fp,sp,12
     d64:	e13ffe15 	stw	r4,-8(fp)
     d68:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
     d6c:	000530fa 	rdctl	r2,ienable
     d70:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
     d74:	00c00044 	movi	r3,1
     d78:	e0bfff17 	ldw	r2,-4(fp)
     d7c:	1884983a 	sll	r2,r3,r2
     d80:	1007883a 	mov	r3,r2
     d84:	e0bffd17 	ldw	r2,-12(fp)
     d88:	1884703a 	and	r2,r3,r2
     d8c:	1004c03a 	cmpne	r2,r2,zero
     d90:	10803fcc 	andi	r2,r2,255
}
     d94:	e037883a 	mov	sp,fp
     d98:	df000017 	ldw	fp,0(sp)
     d9c:	dec00104 	addi	sp,sp,4
     da0:	f800283a 	ret

00000da4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
     da4:	defff504 	addi	sp,sp,-44
     da8:	dfc00a15 	stw	ra,40(sp)
     dac:	df000915 	stw	fp,36(sp)
     db0:	df000904 	addi	fp,sp,36
     db4:	e13ffc15 	stw	r4,-16(fp)
     db8:	e17ffd15 	stw	r5,-12(fp)
     dbc:	e1bffe15 	stw	r6,-8(fp)
     dc0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
     dc4:	00bffa84 	movi	r2,-22
     dc8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
     dcc:	e0bffd17 	ldw	r2,-12(fp)
     dd0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
     dd4:	e0bff817 	ldw	r2,-32(fp)
     dd8:	10800808 	cmpgei	r2,r2,32
     ddc:	1000271e 	bne	r2,zero,e7c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     de0:	0005303a 	rdctl	r2,status
     de4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     de8:	e0fffb17 	ldw	r3,-20(fp)
     dec:	00bfff84 	movi	r2,-2
     df0:	1884703a 	and	r2,r3,r2
     df4:	1001703a 	wrctl	status,r2
  
  return context;
     df8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
     dfc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
     e00:	008000b4 	movhi	r2,2
     e04:	1085bc04 	addi	r2,r2,5872
     e08:	e0fff817 	ldw	r3,-32(fp)
     e0c:	180690fa 	slli	r3,r3,3
     e10:	10c5883a 	add	r2,r2,r3
     e14:	e0fffe17 	ldw	r3,-8(fp)
     e18:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
     e1c:	008000b4 	movhi	r2,2
     e20:	1085bc04 	addi	r2,r2,5872
     e24:	e0fff817 	ldw	r3,-32(fp)
     e28:	180690fa 	slli	r3,r3,3
     e2c:	10c5883a 	add	r2,r2,r3
     e30:	10800104 	addi	r2,r2,4
     e34:	e0ffff17 	ldw	r3,-4(fp)
     e38:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
     e3c:	e0bffe17 	ldw	r2,-8(fp)
     e40:	10000526 	beq	r2,zero,e58 <alt_iic_isr_register+0xb4>
     e44:	e0bff817 	ldw	r2,-32(fp)
     e48:	100b883a 	mov	r5,r2
     e4c:	e13ffc17 	ldw	r4,-16(fp)
     e50:	0000c440 	call	c44 <alt_ic_irq_enable>
     e54:	00000406 	br	e68 <alt_iic_isr_register+0xc4>
     e58:	e0bff817 	ldw	r2,-32(fp)
     e5c:	100b883a 	mov	r5,r2
     e60:	e13ffc17 	ldw	r4,-16(fp)
     e64:	0000ccc0 	call	ccc <alt_ic_irq_disable>
     e68:	e0bff715 	stw	r2,-36(fp)
     e6c:	e0bffa17 	ldw	r2,-24(fp)
     e70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     e74:	e0bff917 	ldw	r2,-28(fp)
     e78:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
     e7c:	e0bff717 	ldw	r2,-36(fp)
}
     e80:	e037883a 	mov	sp,fp
     e84:	dfc00117 	ldw	ra,4(sp)
     e88:	df000017 	ldw	fp,0(sp)
     e8c:	dec00204 	addi	sp,sp,8
     e90:	f800283a 	ret

00000e94 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     e94:	defffc04 	addi	sp,sp,-16
     e98:	df000315 	stw	fp,12(sp)
     e9c:	df000304 	addi	fp,sp,12
     ea0:	e13ffd15 	stw	r4,-12(fp)
     ea4:	e17ffe15 	stw	r5,-8(fp)
     ea8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     eac:	e0fffe17 	ldw	r3,-8(fp)
     eb0:	e0bffd17 	ldw	r2,-12(fp)
     eb4:	18800c26 	beq	r3,r2,ee8 <alt_load_section+0x54>
  {
    while( to != end )
     eb8:	00000806 	br	edc <alt_load_section+0x48>
    {
      *to++ = *from++;
     ebc:	e0bffe17 	ldw	r2,-8(fp)
     ec0:	10c00104 	addi	r3,r2,4
     ec4:	e0fffe15 	stw	r3,-8(fp)
     ec8:	e0fffd17 	ldw	r3,-12(fp)
     ecc:	19000104 	addi	r4,r3,4
     ed0:	e13ffd15 	stw	r4,-12(fp)
     ed4:	18c00017 	ldw	r3,0(r3)
     ed8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     edc:	e0fffe17 	ldw	r3,-8(fp)
     ee0:	e0bfff17 	ldw	r2,-4(fp)
     ee4:	18bff51e 	bne	r3,r2,ebc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
     ee8:	0001883a 	nop
     eec:	e037883a 	mov	sp,fp
     ef0:	df000017 	ldw	fp,0(sp)
     ef4:	dec00104 	addi	sp,sp,4
     ef8:	f800283a 	ret

00000efc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     efc:	defffe04 	addi	sp,sp,-8
     f00:	dfc00115 	stw	ra,4(sp)
     f04:	df000015 	stw	fp,0(sp)
     f08:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     f0c:	018000b4 	movhi	r6,2
     f10:	3185a804 	addi	r6,r6,5792
     f14:	014000b4 	movhi	r5,2
     f18:	29400a04 	addi	r5,r5,40
     f1c:	01000034 	movhi	r4,0
     f20:	210ca704 	addi	r4,r4,12956
     f24:	0000e940 	call	e94 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     f28:	01800034 	movhi	r6,0
     f2c:	31808c04 	addi	r6,r6,560
     f30:	01400034 	movhi	r5,0
     f34:	29400804 	addi	r5,r5,32
     f38:	01000034 	movhi	r4,0
     f3c:	21000804 	addi	r4,r4,32
     f40:	0000e940 	call	e94 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     f44:	018000b4 	movhi	r6,2
     f48:	31800a04 	addi	r6,r6,40
     f4c:	014000b4 	movhi	r5,2
     f50:	29400004 	addi	r5,r5,0
     f54:	01000034 	movhi	r4,0
     f58:	210c9d04 	addi	r4,r4,12916
     f5c:	0000e940 	call	e94 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     f60:	0001ff00 	call	1ff0 <alt_dcache_flush_all>
  alt_icache_flush_all();
     f64:	00021dc0 	call	21dc <alt_icache_flush_all>
}
     f68:	0001883a 	nop
     f6c:	e037883a 	mov	sp,fp
     f70:	dfc00117 	ldw	ra,4(sp)
     f74:	df000017 	ldw	fp,0(sp)
     f78:	dec00204 	addi	sp,sp,8
     f7c:	f800283a 	ret

00000f80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     f80:	defffd04 	addi	sp,sp,-12
     f84:	dfc00215 	stw	ra,8(sp)
     f88:	df000115 	stw	fp,4(sp)
     f8c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     f90:	0009883a 	mov	r4,zero
     f94:	00010600 	call	1060 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     f98:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     f9c:	00010980 	call	1098 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     fa0:	018000b4 	movhi	r6,2
     fa4:	31800004 	addi	r6,r6,0
     fa8:	014000b4 	movhi	r5,2
     fac:	29400004 	addi	r5,r5,0
     fb0:	010000b4 	movhi	r4,2
     fb4:	21000004 	addi	r4,r4,0
     fb8:	000237c0 	call	237c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     fbc:	000211c0 	call	211c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     fc0:	01000034 	movhi	r4,0
     fc4:	21085f04 	addi	r4,r4,8572
     fc8:	0002b240 	call	2b24 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     fcc:	d0a01617 	ldw	r2,-32680(gp)
     fd0:	d0e01717 	ldw	r3,-32676(gp)
     fd4:	d1201817 	ldw	r4,-32672(gp)
     fd8:	200d883a 	mov	r6,r4
     fdc:	180b883a 	mov	r5,r3
     fe0:	1009883a 	mov	r4,r2
     fe4:	00007bc0 	call	7bc <main>
     fe8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     fec:	01000044 	movi	r4,1
     ff0:	0001f180 	call	1f18 <close>
  exit (result);
     ff4:	e13fff17 	ldw	r4,-4(fp)
     ff8:	0002b380 	call	2b38 <exit>

00000ffc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
     ffc:	defffd04 	addi	sp,sp,-12
    1000:	dfc00215 	stw	ra,8(sp)
    1004:	df000115 	stw	fp,4(sp)
    1008:	df000104 	addi	fp,sp,4
    100c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    1010:	e13fff17 	ldw	r4,-4(fp)
    1014:	0001d840 	call	1d84 <alt_busy_sleep>
}
    1018:	e037883a 	mov	sp,fp
    101c:	dfc00117 	ldw	ra,4(sp)
    1020:	df000017 	ldw	fp,0(sp)
    1024:	dec00204 	addi	sp,sp,8
    1028:	f800283a 	ret

0000102c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    102c:	defffd04 	addi	sp,sp,-12
    1030:	dfc00215 	stw	ra,8(sp)
    1034:	df000115 	stw	fp,4(sp)
    1038:	df000104 	addi	fp,sp,4
    103c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    1040:	d1600b04 	addi	r5,gp,-32724
    1044:	e13fff17 	ldw	r4,-4(fp)
    1048:	00020780 	call	2078 <alt_dev_llist_insert>
}
    104c:	e037883a 	mov	sp,fp
    1050:	dfc00117 	ldw	ra,4(sp)
    1054:	df000017 	ldw	fp,0(sp)
    1058:	dec00204 	addi	sp,sp,8
    105c:	f800283a 	ret

00001060 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1060:	defffd04 	addi	sp,sp,-12
    1064:	dfc00215 	stw	ra,8(sp)
    1068:	df000115 	stw	fp,4(sp)
    106c:	df000104 	addi	fp,sp,4
    1070:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
    1074:	00028a40 	call	28a4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1078:	00800044 	movi	r2,1
    107c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1080:	0001883a 	nop
    1084:	e037883a 	mov	sp,fp
    1088:	dfc00117 	ldw	ra,4(sp)
    108c:	df000017 	ldw	fp,0(sp)
    1090:	dec00204 	addi	sp,sp,8
    1094:	f800283a 	ret

00001098 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1098:	defffe04 	addi	sp,sp,-8
    109c:	dfc00115 	stw	ra,4(sp)
    10a0:	df000015 	stw	fp,0(sp)
    10a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMERCORE, TimerCore);
    10a8:	01c00044 	movi	r7,1
    10ac:	000d883a 	mov	r6,zero
    10b0:	000b883a 	mov	r5,zero
    10b4:	010000f4 	movhi	r4,3
    10b8:	21240804 	addi	r4,r4,-28640
    10bc:	0001bdc0 	call	1bdc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    10c0:	01800044 	movi	r6,1
    10c4:	000b883a 	mov	r5,zero
    10c8:	010000b4 	movhi	r4,2
    10cc:	21001404 	addi	r4,r4,80
    10d0:	00012600 	call	1260 <altera_avalon_jtag_uart_init>
    10d4:	010000b4 	movhi	r4,2
    10d8:	21000a04 	addi	r4,r4,40
    10dc:	000102c0 	call	102c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    10e0:	0001883a 	nop
}
    10e4:	0001883a 	nop
    10e8:	e037883a 	mov	sp,fp
    10ec:	dfc00117 	ldw	ra,4(sp)
    10f0:	df000017 	ldw	fp,0(sp)
    10f4:	dec00204 	addi	sp,sp,8
    10f8:	f800283a 	ret

000010fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    10fc:	defffa04 	addi	sp,sp,-24
    1100:	dfc00515 	stw	ra,20(sp)
    1104:	df000415 	stw	fp,16(sp)
    1108:	df000404 	addi	fp,sp,16
    110c:	e13ffd15 	stw	r4,-12(fp)
    1110:	e17ffe15 	stw	r5,-8(fp)
    1114:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1118:	e0bffd17 	ldw	r2,-12(fp)
    111c:	10800017 	ldw	r2,0(r2)
    1120:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1124:	e0bffc17 	ldw	r2,-16(fp)
    1128:	10c00a04 	addi	r3,r2,40
    112c:	e0bffd17 	ldw	r2,-12(fp)
    1130:	10800217 	ldw	r2,8(r2)
    1134:	100f883a 	mov	r7,r2
    1138:	e1bfff17 	ldw	r6,-4(fp)
    113c:	e17ffe17 	ldw	r5,-8(fp)
    1140:	1809883a 	mov	r4,r3
    1144:	00017240 	call	1724 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1148:	e037883a 	mov	sp,fp
    114c:	dfc00117 	ldw	ra,4(sp)
    1150:	df000017 	ldw	fp,0(sp)
    1154:	dec00204 	addi	sp,sp,8
    1158:	f800283a 	ret

0000115c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    115c:	defffa04 	addi	sp,sp,-24
    1160:	dfc00515 	stw	ra,20(sp)
    1164:	df000415 	stw	fp,16(sp)
    1168:	df000404 	addi	fp,sp,16
    116c:	e13ffd15 	stw	r4,-12(fp)
    1170:	e17ffe15 	stw	r5,-8(fp)
    1174:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1178:	e0bffd17 	ldw	r2,-12(fp)
    117c:	10800017 	ldw	r2,0(r2)
    1180:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1184:	e0bffc17 	ldw	r2,-16(fp)
    1188:	10c00a04 	addi	r3,r2,40
    118c:	e0bffd17 	ldw	r2,-12(fp)
    1190:	10800217 	ldw	r2,8(r2)
    1194:	100f883a 	mov	r7,r2
    1198:	e1bfff17 	ldw	r6,-4(fp)
    119c:	e17ffe17 	ldw	r5,-8(fp)
    11a0:	1809883a 	mov	r4,r3
    11a4:	00019400 	call	1940 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    11a8:	e037883a 	mov	sp,fp
    11ac:	dfc00117 	ldw	ra,4(sp)
    11b0:	df000017 	ldw	fp,0(sp)
    11b4:	dec00204 	addi	sp,sp,8
    11b8:	f800283a 	ret

000011bc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    11bc:	defffc04 	addi	sp,sp,-16
    11c0:	dfc00315 	stw	ra,12(sp)
    11c4:	df000215 	stw	fp,8(sp)
    11c8:	df000204 	addi	fp,sp,8
    11cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    11d0:	e0bfff17 	ldw	r2,-4(fp)
    11d4:	10800017 	ldw	r2,0(r2)
    11d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    11dc:	e0bffe17 	ldw	r2,-8(fp)
    11e0:	10c00a04 	addi	r3,r2,40
    11e4:	e0bfff17 	ldw	r2,-4(fp)
    11e8:	10800217 	ldw	r2,8(r2)
    11ec:	100b883a 	mov	r5,r2
    11f0:	1809883a 	mov	r4,r3
    11f4:	00015cc0 	call	15cc <altera_avalon_jtag_uart_close>
}
    11f8:	e037883a 	mov	sp,fp
    11fc:	dfc00117 	ldw	ra,4(sp)
    1200:	df000017 	ldw	fp,0(sp)
    1204:	dec00204 	addi	sp,sp,8
    1208:	f800283a 	ret

0000120c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    120c:	defffa04 	addi	sp,sp,-24
    1210:	dfc00515 	stw	ra,20(sp)
    1214:	df000415 	stw	fp,16(sp)
    1218:	df000404 	addi	fp,sp,16
    121c:	e13ffd15 	stw	r4,-12(fp)
    1220:	e17ffe15 	stw	r5,-8(fp)
    1224:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    1228:	e0bffd17 	ldw	r2,-12(fp)
    122c:	10800017 	ldw	r2,0(r2)
    1230:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    1234:	e0bffc17 	ldw	r2,-16(fp)
    1238:	10800a04 	addi	r2,r2,40
    123c:	e1bfff17 	ldw	r6,-4(fp)
    1240:	e17ffe17 	ldw	r5,-8(fp)
    1244:	1009883a 	mov	r4,r2
    1248:	00016340 	call	1634 <altera_avalon_jtag_uart_ioctl>
}
    124c:	e037883a 	mov	sp,fp
    1250:	dfc00117 	ldw	ra,4(sp)
    1254:	df000017 	ldw	fp,0(sp)
    1258:	dec00204 	addi	sp,sp,8
    125c:	f800283a 	ret

00001260 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    1260:	defffa04 	addi	sp,sp,-24
    1264:	dfc00515 	stw	ra,20(sp)
    1268:	df000415 	stw	fp,16(sp)
    126c:	df000404 	addi	fp,sp,16
    1270:	e13ffd15 	stw	r4,-12(fp)
    1274:	e17ffe15 	stw	r5,-8(fp)
    1278:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    127c:	e0bffd17 	ldw	r2,-12(fp)
    1280:	00c00044 	movi	r3,1
    1284:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    1288:	e0bffd17 	ldw	r2,-12(fp)
    128c:	10800017 	ldw	r2,0(r2)
    1290:	10800104 	addi	r2,r2,4
    1294:	1007883a 	mov	r3,r2
    1298:	e0bffd17 	ldw	r2,-12(fp)
    129c:	10800817 	ldw	r2,32(r2)
    12a0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    12a4:	e0bffe17 	ldw	r2,-8(fp)
    12a8:	e0ffff17 	ldw	r3,-4(fp)
    12ac:	d8000015 	stw	zero,0(sp)
    12b0:	e1fffd17 	ldw	r7,-12(fp)
    12b4:	01800034 	movhi	r6,0
    12b8:	3184c804 	addi	r6,r6,4896
    12bc:	180b883a 	mov	r5,r3
    12c0:	1009883a 	mov	r4,r2
    12c4:	0000bf40 	call	bf4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    12c8:	e0bffd17 	ldw	r2,-12(fp)
    12cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    12d0:	e0bffd17 	ldw	r2,-12(fp)
    12d4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    12d8:	d0e01a17 	ldw	r3,-32664(gp)
    12dc:	e1fffd17 	ldw	r7,-12(fp)
    12e0:	01800034 	movhi	r6,0
    12e4:	31854b04 	addi	r6,r6,5420
    12e8:	180b883a 	mov	r5,r3
    12ec:	1009883a 	mov	r4,r2
    12f0:	0001c580 	call	1c58 <alt_alarm_start>
    12f4:	1000040e 	bge	r2,zero,1308 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    12f8:	e0fffd17 	ldw	r3,-12(fp)
    12fc:	00a00034 	movhi	r2,32768
    1300:	10bfffc4 	addi	r2,r2,-1
    1304:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    1308:	0001883a 	nop
    130c:	e037883a 	mov	sp,fp
    1310:	dfc00117 	ldw	ra,4(sp)
    1314:	df000017 	ldw	fp,0(sp)
    1318:	dec00204 	addi	sp,sp,8
    131c:	f800283a 	ret

00001320 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    1320:	defff804 	addi	sp,sp,-32
    1324:	df000715 	stw	fp,28(sp)
    1328:	df000704 	addi	fp,sp,28
    132c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    1330:	e0bfff17 	ldw	r2,-4(fp)
    1334:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    1338:	e0bffb17 	ldw	r2,-20(fp)
    133c:	10800017 	ldw	r2,0(r2)
    1340:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1344:	e0bffc17 	ldw	r2,-16(fp)
    1348:	10800104 	addi	r2,r2,4
    134c:	10800037 	ldwio	r2,0(r2)
    1350:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    1354:	e0bffd17 	ldw	r2,-12(fp)
    1358:	1080c00c 	andi	r2,r2,768
    135c:	10006d26 	beq	r2,zero,1514 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	1080400c 	andi	r2,r2,256
    1368:	10003526 	beq	r2,zero,1440 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    136c:	00800074 	movhi	r2,1
    1370:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1374:	e0bffb17 	ldw	r2,-20(fp)
    1378:	10800a17 	ldw	r2,40(r2)
    137c:	10800044 	addi	r2,r2,1
    1380:	1081ffcc 	andi	r2,r2,2047
    1384:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    1388:	e0bffb17 	ldw	r2,-20(fp)
    138c:	10c00b17 	ldw	r3,44(r2)
    1390:	e0bffe17 	ldw	r2,-8(fp)
    1394:	18801526 	beq	r3,r2,13ec <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1398:	e0bffc17 	ldw	r2,-16(fp)
    139c:	10800037 	ldwio	r2,0(r2)
    13a0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    13a4:	e0bff917 	ldw	r2,-28(fp)
    13a8:	10a0000c 	andi	r2,r2,32768
    13ac:	10001126 	beq	r2,zero,13f4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    13b0:	e0bffb17 	ldw	r2,-20(fp)
    13b4:	10800a17 	ldw	r2,40(r2)
    13b8:	e0fff917 	ldw	r3,-28(fp)
    13bc:	1809883a 	mov	r4,r3
    13c0:	e0fffb17 	ldw	r3,-20(fp)
    13c4:	1885883a 	add	r2,r3,r2
    13c8:	10800e04 	addi	r2,r2,56
    13cc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    13d0:	e0bffb17 	ldw	r2,-20(fp)
    13d4:	10800a17 	ldw	r2,40(r2)
    13d8:	10800044 	addi	r2,r2,1
    13dc:	10c1ffcc 	andi	r3,r2,2047
    13e0:	e0bffb17 	ldw	r2,-20(fp)
    13e4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    13e8:	003fe206 	br	1374 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    13ec:	0001883a 	nop
    13f0:	00000106 	br	13f8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    13f4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    13f8:	e0bff917 	ldw	r2,-28(fp)
    13fc:	10bfffec 	andhi	r2,r2,65535
    1400:	10000f26 	beq	r2,zero,1440 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1404:	e0bffb17 	ldw	r2,-20(fp)
    1408:	10c00817 	ldw	r3,32(r2)
    140c:	00bfff84 	movi	r2,-2
    1410:	1886703a 	and	r3,r3,r2
    1414:	e0bffb17 	ldw	r2,-20(fp)
    1418:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    141c:	e0bffc17 	ldw	r2,-16(fp)
    1420:	10800104 	addi	r2,r2,4
    1424:	1007883a 	mov	r3,r2
    1428:	e0bffb17 	ldw	r2,-20(fp)
    142c:	10800817 	ldw	r2,32(r2)
    1430:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1434:	e0bffc17 	ldw	r2,-16(fp)
    1438:	10800104 	addi	r2,r2,4
    143c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    1440:	e0bffd17 	ldw	r2,-12(fp)
    1444:	1080800c 	andi	r2,r2,512
    1448:	103fbe26 	beq	r2,zero,1344 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    144c:	e0bffd17 	ldw	r2,-12(fp)
    1450:	1004d43a 	srli	r2,r2,16
    1454:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    1458:	00001406 	br	14ac <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    145c:	e0bffc17 	ldw	r2,-16(fp)
    1460:	e0fffb17 	ldw	r3,-20(fp)
    1464:	18c00d17 	ldw	r3,52(r3)
    1468:	e13ffb17 	ldw	r4,-20(fp)
    146c:	20c7883a 	add	r3,r4,r3
    1470:	18c20e04 	addi	r3,r3,2104
    1474:	18c00003 	ldbu	r3,0(r3)
    1478:	18c03fcc 	andi	r3,r3,255
    147c:	18c0201c 	xori	r3,r3,128
    1480:	18ffe004 	addi	r3,r3,-128
    1484:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1488:	e0bffb17 	ldw	r2,-20(fp)
    148c:	10800d17 	ldw	r2,52(r2)
    1490:	10800044 	addi	r2,r2,1
    1494:	10c1ffcc 	andi	r3,r2,2047
    1498:	e0bffb17 	ldw	r2,-20(fp)
    149c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    14a0:	e0bffa17 	ldw	r2,-24(fp)
    14a4:	10bfffc4 	addi	r2,r2,-1
    14a8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    14ac:	e0bffa17 	ldw	r2,-24(fp)
    14b0:	10000526 	beq	r2,zero,14c8 <altera_avalon_jtag_uart_irq+0x1a8>
    14b4:	e0bffb17 	ldw	r2,-20(fp)
    14b8:	10c00d17 	ldw	r3,52(r2)
    14bc:	e0bffb17 	ldw	r2,-20(fp)
    14c0:	10800c17 	ldw	r2,48(r2)
    14c4:	18bfe51e 	bne	r3,r2,145c <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    14c8:	e0bffa17 	ldw	r2,-24(fp)
    14cc:	103f9d26 	beq	r2,zero,1344 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    14d0:	e0bffb17 	ldw	r2,-20(fp)
    14d4:	10c00817 	ldw	r3,32(r2)
    14d8:	00bfff44 	movi	r2,-3
    14dc:	1886703a 	and	r3,r3,r2
    14e0:	e0bffb17 	ldw	r2,-20(fp)
    14e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    14e8:	e0bffb17 	ldw	r2,-20(fp)
    14ec:	10800017 	ldw	r2,0(r2)
    14f0:	10800104 	addi	r2,r2,4
    14f4:	1007883a 	mov	r3,r2
    14f8:	e0bffb17 	ldw	r2,-20(fp)
    14fc:	10800817 	ldw	r2,32(r2)
    1500:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1504:	e0bffc17 	ldw	r2,-16(fp)
    1508:	10800104 	addi	r2,r2,4
    150c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    1510:	003f8c06 	br	1344 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    1514:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    1518:	0001883a 	nop
    151c:	e037883a 	mov	sp,fp
    1520:	df000017 	ldw	fp,0(sp)
    1524:	dec00104 	addi	sp,sp,4
    1528:	f800283a 	ret

0000152c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    152c:	defff804 	addi	sp,sp,-32
    1530:	df000715 	stw	fp,28(sp)
    1534:	df000704 	addi	fp,sp,28
    1538:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    153c:	e0bffb17 	ldw	r2,-20(fp)
    1540:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1544:	e0bff917 	ldw	r2,-28(fp)
    1548:	10800017 	ldw	r2,0(r2)
    154c:	10800104 	addi	r2,r2,4
    1550:	10800037 	ldwio	r2,0(r2)
    1554:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    1558:	e0bffa17 	ldw	r2,-24(fp)
    155c:	1081000c 	andi	r2,r2,1024
    1560:	10000b26 	beq	r2,zero,1590 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    1564:	e0bff917 	ldw	r2,-28(fp)
    1568:	10800017 	ldw	r2,0(r2)
    156c:	10800104 	addi	r2,r2,4
    1570:	1007883a 	mov	r3,r2
    1574:	e0bff917 	ldw	r2,-28(fp)
    1578:	10800817 	ldw	r2,32(r2)
    157c:	10810014 	ori	r2,r2,1024
    1580:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    1584:	e0bff917 	ldw	r2,-28(fp)
    1588:	10000915 	stw	zero,36(r2)
    158c:	00000a06 	br	15b8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    1590:	e0bff917 	ldw	r2,-28(fp)
    1594:	10c00917 	ldw	r3,36(r2)
    1598:	00a00034 	movhi	r2,32768
    159c:	10bfff04 	addi	r2,r2,-4
    15a0:	10c00536 	bltu	r2,r3,15b8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    15a4:	e0bff917 	ldw	r2,-28(fp)
    15a8:	10800917 	ldw	r2,36(r2)
    15ac:	10c00044 	addi	r3,r2,1
    15b0:	e0bff917 	ldw	r2,-28(fp)
    15b4:	10c00915 	stw	r3,36(r2)
    15b8:	d0a01a17 	ldw	r2,-32664(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    15bc:	e037883a 	mov	sp,fp
    15c0:	df000017 	ldw	fp,0(sp)
    15c4:	dec00104 	addi	sp,sp,4
    15c8:	f800283a 	ret

000015cc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    15cc:	defffd04 	addi	sp,sp,-12
    15d0:	df000215 	stw	fp,8(sp)
    15d4:	df000204 	addi	fp,sp,8
    15d8:	e13ffe15 	stw	r4,-8(fp)
    15dc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    15e0:	00000506 	br	15f8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    15e4:	e0bfff17 	ldw	r2,-4(fp)
    15e8:	1090000c 	andi	r2,r2,16384
    15ec:	10000226 	beq	r2,zero,15f8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    15f0:	00bffd44 	movi	r2,-11
    15f4:	00000b06 	br	1624 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    15f8:	e0bffe17 	ldw	r2,-8(fp)
    15fc:	10c00d17 	ldw	r3,52(r2)
    1600:	e0bffe17 	ldw	r2,-8(fp)
    1604:	10800c17 	ldw	r2,48(r2)
    1608:	18800526 	beq	r3,r2,1620 <altera_avalon_jtag_uart_close+0x54>
    160c:	e0bffe17 	ldw	r2,-8(fp)
    1610:	10c00917 	ldw	r3,36(r2)
    1614:	e0bffe17 	ldw	r2,-8(fp)
    1618:	10800117 	ldw	r2,4(r2)
    161c:	18bff136 	bltu	r3,r2,15e4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1620:	0005883a 	mov	r2,zero
}
    1624:	e037883a 	mov	sp,fp
    1628:	df000017 	ldw	fp,0(sp)
    162c:	dec00104 	addi	sp,sp,4
    1630:	f800283a 	ret

00001634 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1634:	defffa04 	addi	sp,sp,-24
    1638:	df000515 	stw	fp,20(sp)
    163c:	df000504 	addi	fp,sp,20
    1640:	e13ffd15 	stw	r4,-12(fp)
    1644:	e17ffe15 	stw	r5,-8(fp)
    1648:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    164c:	00bff9c4 	movi	r2,-25
    1650:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    1654:	e0bffe17 	ldw	r2,-8(fp)
    1658:	10da8060 	cmpeqi	r3,r2,27137
    165c:	1800031e 	bne	r3,zero,166c <altera_avalon_jtag_uart_ioctl+0x38>
    1660:	109a80a0 	cmpeqi	r2,r2,27138
    1664:	1000181e 	bne	r2,zero,16c8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    1668:	00002906 	br	1710 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    166c:	e0bffd17 	ldw	r2,-12(fp)
    1670:	10c00117 	ldw	r3,4(r2)
    1674:	00a00034 	movhi	r2,32768
    1678:	10bfffc4 	addi	r2,r2,-1
    167c:	18802126 	beq	r3,r2,1704 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    1680:	e0bfff17 	ldw	r2,-4(fp)
    1684:	10800017 	ldw	r2,0(r2)
    1688:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    168c:	e0bffc17 	ldw	r2,-16(fp)
    1690:	10800090 	cmplti	r2,r2,2
    1694:	1000061e 	bne	r2,zero,16b0 <altera_avalon_jtag_uart_ioctl+0x7c>
    1698:	e0fffc17 	ldw	r3,-16(fp)
    169c:	00a00034 	movhi	r2,32768
    16a0:	10bfffc4 	addi	r2,r2,-1
    16a4:	18800226 	beq	r3,r2,16b0 <altera_avalon_jtag_uart_ioctl+0x7c>
    16a8:	e0bffc17 	ldw	r2,-16(fp)
    16ac:	00000206 	br	16b8 <altera_avalon_jtag_uart_ioctl+0x84>
    16b0:	00a00034 	movhi	r2,32768
    16b4:	10bfff84 	addi	r2,r2,-2
    16b8:	e0fffd17 	ldw	r3,-12(fp)
    16bc:	18800115 	stw	r2,4(r3)
      rc = 0;
    16c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    16c4:	00000f06 	br	1704 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    16c8:	e0bffd17 	ldw	r2,-12(fp)
    16cc:	10c00117 	ldw	r3,4(r2)
    16d0:	00a00034 	movhi	r2,32768
    16d4:	10bfffc4 	addi	r2,r2,-1
    16d8:	18800c26 	beq	r3,r2,170c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    16dc:	e0bffd17 	ldw	r2,-12(fp)
    16e0:	10c00917 	ldw	r3,36(r2)
    16e4:	e0bffd17 	ldw	r2,-12(fp)
    16e8:	10800117 	ldw	r2,4(r2)
    16ec:	1885803a 	cmpltu	r2,r3,r2
    16f0:	10c03fcc 	andi	r3,r2,255
    16f4:	e0bfff17 	ldw	r2,-4(fp)
    16f8:	10c00015 	stw	r3,0(r2)
      rc = 0;
    16fc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    1700:	00000206 	br	170c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    1704:	0001883a 	nop
    1708:	00000106 	br	1710 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    170c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    1710:	e0bffb17 	ldw	r2,-20(fp)
}
    1714:	e037883a 	mov	sp,fp
    1718:	df000017 	ldw	fp,0(sp)
    171c:	dec00104 	addi	sp,sp,4
    1720:	f800283a 	ret

00001724 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1724:	defff304 	addi	sp,sp,-52
    1728:	dfc00c15 	stw	ra,48(sp)
    172c:	df000b15 	stw	fp,44(sp)
    1730:	df000b04 	addi	fp,sp,44
    1734:	e13ffc15 	stw	r4,-16(fp)
    1738:	e17ffd15 	stw	r5,-12(fp)
    173c:	e1bffe15 	stw	r6,-8(fp)
    1740:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    1744:	e0bffd17 	ldw	r2,-12(fp)
    1748:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    174c:	00004706 	br	186c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1750:	e0bffc17 	ldw	r2,-16(fp)
    1754:	10800a17 	ldw	r2,40(r2)
    1758:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    175c:	e0bffc17 	ldw	r2,-16(fp)
    1760:	10800b17 	ldw	r2,44(r2)
    1764:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    1768:	e0fff717 	ldw	r3,-36(fp)
    176c:	e0bff817 	ldw	r2,-32(fp)
    1770:	18800536 	bltu	r3,r2,1788 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    1774:	e0fff717 	ldw	r3,-36(fp)
    1778:	e0bff817 	ldw	r2,-32(fp)
    177c:	1885c83a 	sub	r2,r3,r2
    1780:	e0bff615 	stw	r2,-40(fp)
    1784:	00000406 	br	1798 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1788:	00c20004 	movi	r3,2048
    178c:	e0bff817 	ldw	r2,-32(fp)
    1790:	1885c83a 	sub	r2,r3,r2
    1794:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    1798:	e0bff617 	ldw	r2,-40(fp)
    179c:	10001e26 	beq	r2,zero,1818 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    17a0:	e0fffe17 	ldw	r3,-8(fp)
    17a4:	e0bff617 	ldw	r2,-40(fp)
    17a8:	1880022e 	bgeu	r3,r2,17b4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    17ac:	e0bffe17 	ldw	r2,-8(fp)
    17b0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    17b4:	e0bffc17 	ldw	r2,-16(fp)
    17b8:	10c00e04 	addi	r3,r2,56
    17bc:	e0bff817 	ldw	r2,-32(fp)
    17c0:	1885883a 	add	r2,r3,r2
    17c4:	e1bff617 	ldw	r6,-40(fp)
    17c8:	100b883a 	mov	r5,r2
    17cc:	e13ff517 	ldw	r4,-44(fp)
    17d0:	0002bec0 	call	2bec <memcpy>
      ptr   += n;
    17d4:	e0fff517 	ldw	r3,-44(fp)
    17d8:	e0bff617 	ldw	r2,-40(fp)
    17dc:	1885883a 	add	r2,r3,r2
    17e0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    17e4:	e0fffe17 	ldw	r3,-8(fp)
    17e8:	e0bff617 	ldw	r2,-40(fp)
    17ec:	1885c83a 	sub	r2,r3,r2
    17f0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    17f4:	e0fff817 	ldw	r3,-32(fp)
    17f8:	e0bff617 	ldw	r2,-40(fp)
    17fc:	1885883a 	add	r2,r3,r2
    1800:	10c1ffcc 	andi	r3,r2,2047
    1804:	e0bffc17 	ldw	r2,-16(fp)
    1808:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    180c:	e0bffe17 	ldw	r2,-8(fp)
    1810:	00bfcf16 	blt	zero,r2,1750 <altera_avalon_jtag_uart_read+0x2c>
    1814:	00000106 	br	181c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    1818:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    181c:	e0fff517 	ldw	r3,-44(fp)
    1820:	e0bffd17 	ldw	r2,-12(fp)
    1824:	1880141e 	bne	r3,r2,1878 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1828:	e0bfff17 	ldw	r2,-4(fp)
    182c:	1090000c 	andi	r2,r2,16384
    1830:	1000131e 	bne	r2,zero,1880 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1834:	0001883a 	nop
    1838:	e0bffc17 	ldw	r2,-16(fp)
    183c:	10c00a17 	ldw	r3,40(r2)
    1840:	e0bff717 	ldw	r2,-36(fp)
    1844:	1880051e 	bne	r3,r2,185c <altera_avalon_jtag_uart_read+0x138>
    1848:	e0bffc17 	ldw	r2,-16(fp)
    184c:	10c00917 	ldw	r3,36(r2)
    1850:	e0bffc17 	ldw	r2,-16(fp)
    1854:	10800117 	ldw	r2,4(r2)
    1858:	18bff736 	bltu	r3,r2,1838 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    185c:	e0bffc17 	ldw	r2,-16(fp)
    1860:	10c00a17 	ldw	r3,40(r2)
    1864:	e0bff717 	ldw	r2,-36(fp)
    1868:	18800726 	beq	r3,r2,1888 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    186c:	e0bffe17 	ldw	r2,-8(fp)
    1870:	00bfb716 	blt	zero,r2,1750 <altera_avalon_jtag_uart_read+0x2c>
    1874:	00000506 	br	188c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    1878:	0001883a 	nop
    187c:	00000306 	br	188c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    1880:	0001883a 	nop
    1884:	00000106 	br	188c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    1888:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    188c:	e0fff517 	ldw	r3,-44(fp)
    1890:	e0bffd17 	ldw	r2,-12(fp)
    1894:	18801826 	beq	r3,r2,18f8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1898:	0005303a 	rdctl	r2,status
    189c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    18a0:	e0fffb17 	ldw	r3,-20(fp)
    18a4:	00bfff84 	movi	r2,-2
    18a8:	1884703a 	and	r2,r3,r2
    18ac:	1001703a 	wrctl	status,r2
  
  return context;
    18b0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    18b4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    18b8:	e0bffc17 	ldw	r2,-16(fp)
    18bc:	10800817 	ldw	r2,32(r2)
    18c0:	10c00054 	ori	r3,r2,1
    18c4:	e0bffc17 	ldw	r2,-16(fp)
    18c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    18cc:	e0bffc17 	ldw	r2,-16(fp)
    18d0:	10800017 	ldw	r2,0(r2)
    18d4:	10800104 	addi	r2,r2,4
    18d8:	1007883a 	mov	r3,r2
    18dc:	e0bffc17 	ldw	r2,-16(fp)
    18e0:	10800817 	ldw	r2,32(r2)
    18e4:	18800035 	stwio	r2,0(r3)
    18e8:	e0bffa17 	ldw	r2,-24(fp)
    18ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    18f0:	e0bff917 	ldw	r2,-28(fp)
    18f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    18f8:	e0fff517 	ldw	r3,-44(fp)
    18fc:	e0bffd17 	ldw	r2,-12(fp)
    1900:	18800426 	beq	r3,r2,1914 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    1904:	e0fff517 	ldw	r3,-44(fp)
    1908:	e0bffd17 	ldw	r2,-12(fp)
    190c:	1885c83a 	sub	r2,r3,r2
    1910:	00000606 	br	192c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    1914:	e0bfff17 	ldw	r2,-4(fp)
    1918:	1090000c 	andi	r2,r2,16384
    191c:	10000226 	beq	r2,zero,1928 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    1920:	00bffd44 	movi	r2,-11
    1924:	00000106 	br	192c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    1928:	00bffec4 	movi	r2,-5
}
    192c:	e037883a 	mov	sp,fp
    1930:	dfc00117 	ldw	ra,4(sp)
    1934:	df000017 	ldw	fp,0(sp)
    1938:	dec00204 	addi	sp,sp,8
    193c:	f800283a 	ret

00001940 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1940:	defff304 	addi	sp,sp,-52
    1944:	dfc00c15 	stw	ra,48(sp)
    1948:	df000b15 	stw	fp,44(sp)
    194c:	df000b04 	addi	fp,sp,44
    1950:	e13ffc15 	stw	r4,-16(fp)
    1954:	e17ffd15 	stw	r5,-12(fp)
    1958:	e1bffe15 	stw	r6,-8(fp)
    195c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    1960:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1964:	e0bffd17 	ldw	r2,-12(fp)
    1968:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    196c:	00003706 	br	1a4c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1970:	e0bffc17 	ldw	r2,-16(fp)
    1974:	10800c17 	ldw	r2,48(r2)
    1978:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    197c:	e0bffc17 	ldw	r2,-16(fp)
    1980:	10800d17 	ldw	r2,52(r2)
    1984:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    1988:	e0fff917 	ldw	r3,-28(fp)
    198c:	e0bff517 	ldw	r2,-44(fp)
    1990:	1880062e 	bgeu	r3,r2,19ac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1994:	e0fff517 	ldw	r3,-44(fp)
    1998:	e0bff917 	ldw	r2,-28(fp)
    199c:	1885c83a 	sub	r2,r3,r2
    19a0:	10bfffc4 	addi	r2,r2,-1
    19a4:	e0bff615 	stw	r2,-40(fp)
    19a8:	00000b06 	br	19d8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    19ac:	e0bff517 	ldw	r2,-44(fp)
    19b0:	10000526 	beq	r2,zero,19c8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    19b4:	00c20004 	movi	r3,2048
    19b8:	e0bff917 	ldw	r2,-28(fp)
    19bc:	1885c83a 	sub	r2,r3,r2
    19c0:	e0bff615 	stw	r2,-40(fp)
    19c4:	00000406 	br	19d8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    19c8:	00c1ffc4 	movi	r3,2047
    19cc:	e0bff917 	ldw	r2,-28(fp)
    19d0:	1885c83a 	sub	r2,r3,r2
    19d4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    19d8:	e0bff617 	ldw	r2,-40(fp)
    19dc:	10001e26 	beq	r2,zero,1a58 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    19e0:	e0fffe17 	ldw	r3,-8(fp)
    19e4:	e0bff617 	ldw	r2,-40(fp)
    19e8:	1880022e 	bgeu	r3,r2,19f4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    19ec:	e0bffe17 	ldw	r2,-8(fp)
    19f0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    19f4:	e0bffc17 	ldw	r2,-16(fp)
    19f8:	10c20e04 	addi	r3,r2,2104
    19fc:	e0bff917 	ldw	r2,-28(fp)
    1a00:	1885883a 	add	r2,r3,r2
    1a04:	e1bff617 	ldw	r6,-40(fp)
    1a08:	e17ffd17 	ldw	r5,-12(fp)
    1a0c:	1009883a 	mov	r4,r2
    1a10:	0002bec0 	call	2bec <memcpy>
      ptr   += n;
    1a14:	e0fffd17 	ldw	r3,-12(fp)
    1a18:	e0bff617 	ldw	r2,-40(fp)
    1a1c:	1885883a 	add	r2,r3,r2
    1a20:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    1a24:	e0fffe17 	ldw	r3,-8(fp)
    1a28:	e0bff617 	ldw	r2,-40(fp)
    1a2c:	1885c83a 	sub	r2,r3,r2
    1a30:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1a34:	e0fff917 	ldw	r3,-28(fp)
    1a38:	e0bff617 	ldw	r2,-40(fp)
    1a3c:	1885883a 	add	r2,r3,r2
    1a40:	10c1ffcc 	andi	r3,r2,2047
    1a44:	e0bffc17 	ldw	r2,-16(fp)
    1a48:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1a4c:	e0bffe17 	ldw	r2,-8(fp)
    1a50:	00bfc716 	blt	zero,r2,1970 <altera_avalon_jtag_uart_write+0x30>
    1a54:	00000106 	br	1a5c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    1a58:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a5c:	0005303a 	rdctl	r2,status
    1a60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a64:	e0fffb17 	ldw	r3,-20(fp)
    1a68:	00bfff84 	movi	r2,-2
    1a6c:	1884703a 	and	r2,r3,r2
    1a70:	1001703a 	wrctl	status,r2
  
  return context;
    1a74:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    1a78:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1a7c:	e0bffc17 	ldw	r2,-16(fp)
    1a80:	10800817 	ldw	r2,32(r2)
    1a84:	10c00094 	ori	r3,r2,2
    1a88:	e0bffc17 	ldw	r2,-16(fp)
    1a8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1a90:	e0bffc17 	ldw	r2,-16(fp)
    1a94:	10800017 	ldw	r2,0(r2)
    1a98:	10800104 	addi	r2,r2,4
    1a9c:	1007883a 	mov	r3,r2
    1aa0:	e0bffc17 	ldw	r2,-16(fp)
    1aa4:	10800817 	ldw	r2,32(r2)
    1aa8:	18800035 	stwio	r2,0(r3)
    1aac:	e0bffa17 	ldw	r2,-24(fp)
    1ab0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1ab4:	e0bff817 	ldw	r2,-32(fp)
    1ab8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    1abc:	e0bffe17 	ldw	r2,-8(fp)
    1ac0:	0080100e 	bge	zero,r2,1b04 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    1ac4:	e0bfff17 	ldw	r2,-4(fp)
    1ac8:	1090000c 	andi	r2,r2,16384
    1acc:	1000101e 	bne	r2,zero,1b10 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1ad0:	0001883a 	nop
    1ad4:	e0bffc17 	ldw	r2,-16(fp)
    1ad8:	10c00d17 	ldw	r3,52(r2)
    1adc:	e0bff517 	ldw	r2,-44(fp)
    1ae0:	1880051e 	bne	r3,r2,1af8 <altera_avalon_jtag_uart_write+0x1b8>
    1ae4:	e0bffc17 	ldw	r2,-16(fp)
    1ae8:	10c00917 	ldw	r3,36(r2)
    1aec:	e0bffc17 	ldw	r2,-16(fp)
    1af0:	10800117 	ldw	r2,4(r2)
    1af4:	18bff736 	bltu	r3,r2,1ad4 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    1af8:	e0bffc17 	ldw	r2,-16(fp)
    1afc:	10800917 	ldw	r2,36(r2)
    1b00:	1000051e 	bne	r2,zero,1b18 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    1b04:	e0bffe17 	ldw	r2,-8(fp)
    1b08:	00bfd016 	blt	zero,r2,1a4c <altera_avalon_jtag_uart_write+0x10c>
    1b0c:	00000306 	br	1b1c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    1b10:	0001883a 	nop
    1b14:	00000106 	br	1b1c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    1b18:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1b1c:	e0fffd17 	ldw	r3,-12(fp)
    1b20:	e0bff717 	ldw	r2,-36(fp)
    1b24:	18800426 	beq	r3,r2,1b38 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    1b28:	e0fffd17 	ldw	r3,-12(fp)
    1b2c:	e0bff717 	ldw	r2,-36(fp)
    1b30:	1885c83a 	sub	r2,r3,r2
    1b34:	00000606 	br	1b50 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    1b38:	e0bfff17 	ldw	r2,-4(fp)
    1b3c:	1090000c 	andi	r2,r2,16384
    1b40:	10000226 	beq	r2,zero,1b4c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    1b44:	00bffd44 	movi	r2,-11
    1b48:	00000106 	br	1b50 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1b4c:	00bffec4 	movi	r2,-5
}
    1b50:	e037883a 	mov	sp,fp
    1b54:	dfc00117 	ldw	ra,4(sp)
    1b58:	df000017 	ldw	fp,0(sp)
    1b5c:	dec00204 	addi	sp,sp,8
    1b60:	f800283a 	ret

00001b64 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1b64:	defffa04 	addi	sp,sp,-24
    1b68:	dfc00515 	stw	ra,20(sp)
    1b6c:	df000415 	stw	fp,16(sp)
    1b70:	df000404 	addi	fp,sp,16
    1b74:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1b78:	0007883a 	mov	r3,zero
    1b7c:	e0bfff17 	ldw	r2,-4(fp)
    1b80:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1b84:	e0bfff17 	ldw	r2,-4(fp)
    1b88:	10800104 	addi	r2,r2,4
    1b8c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1b90:	0005303a 	rdctl	r2,status
    1b94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1b98:	e0fffd17 	ldw	r3,-12(fp)
    1b9c:	00bfff84 	movi	r2,-2
    1ba0:	1884703a 	and	r2,r3,r2
    1ba4:	1001703a 	wrctl	status,r2
  
  return context;
    1ba8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    1bac:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    1bb0:	000279c0 	call	279c <alt_tick>
    1bb4:	e0bffc17 	ldw	r2,-16(fp)
    1bb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1bbc:	e0bffe17 	ldw	r2,-8(fp)
    1bc0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    1bc4:	0001883a 	nop
    1bc8:	e037883a 	mov	sp,fp
    1bcc:	dfc00117 	ldw	ra,4(sp)
    1bd0:	df000017 	ldw	fp,0(sp)
    1bd4:	dec00204 	addi	sp,sp,8
    1bd8:	f800283a 	ret

00001bdc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    1bdc:	defff804 	addi	sp,sp,-32
    1be0:	dfc00715 	stw	ra,28(sp)
    1be4:	df000615 	stw	fp,24(sp)
    1be8:	df000604 	addi	fp,sp,24
    1bec:	e13ffc15 	stw	r4,-16(fp)
    1bf0:	e17ffd15 	stw	r5,-12(fp)
    1bf4:	e1bffe15 	stw	r6,-8(fp)
    1bf8:	e1ffff15 	stw	r7,-4(fp)
    1bfc:	e0bfff17 	ldw	r2,-4(fp)
    1c00:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1c04:	d0a01a17 	ldw	r2,-32664(gp)
    1c08:	1000021e 	bne	r2,zero,1c14 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    1c0c:	e0bffb17 	ldw	r2,-20(fp)
    1c10:	d0a01a15 	stw	r2,-32664(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1c14:	e0bffc17 	ldw	r2,-16(fp)
    1c18:	10800104 	addi	r2,r2,4
    1c1c:	00c001c4 	movi	r3,7
    1c20:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    1c24:	d8000015 	stw	zero,0(sp)
    1c28:	e1fffc17 	ldw	r7,-16(fp)
    1c2c:	01800034 	movhi	r6,0
    1c30:	3186d904 	addi	r6,r6,7012
    1c34:	e17ffe17 	ldw	r5,-8(fp)
    1c38:	e13ffd17 	ldw	r4,-12(fp)
    1c3c:	0000bf40 	call	bf4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    1c40:	0001883a 	nop
    1c44:	e037883a 	mov	sp,fp
    1c48:	dfc00117 	ldw	ra,4(sp)
    1c4c:	df000017 	ldw	fp,0(sp)
    1c50:	dec00204 	addi	sp,sp,8
    1c54:	f800283a 	ret

00001c58 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1c58:	defff504 	addi	sp,sp,-44
    1c5c:	df000a15 	stw	fp,40(sp)
    1c60:	df000a04 	addi	fp,sp,40
    1c64:	e13ffc15 	stw	r4,-16(fp)
    1c68:	e17ffd15 	stw	r5,-12(fp)
    1c6c:	e1bffe15 	stw	r6,-8(fp)
    1c70:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    1c74:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1c78:	d0a01a17 	ldw	r2,-32664(gp)
  
  if (alt_ticks_per_second ())
    1c7c:	10003c26 	beq	r2,zero,1d70 <alt_alarm_start+0x118>
  {
    if (alarm)
    1c80:	e0bffc17 	ldw	r2,-16(fp)
    1c84:	10003826 	beq	r2,zero,1d68 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    1c88:	e0bffc17 	ldw	r2,-16(fp)
    1c8c:	e0fffe17 	ldw	r3,-8(fp)
    1c90:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    1c94:	e0bffc17 	ldw	r2,-16(fp)
    1c98:	e0ffff17 	ldw	r3,-4(fp)
    1c9c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1ca0:	0005303a 	rdctl	r2,status
    1ca4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1ca8:	e0fff917 	ldw	r3,-28(fp)
    1cac:	00bfff84 	movi	r2,-2
    1cb0:	1884703a 	and	r2,r3,r2
    1cb4:	1001703a 	wrctl	status,r2
  
  return context;
    1cb8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    1cbc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1cc0:	d0a01b17 	ldw	r2,-32660(gp)
      
      current_nticks = alt_nticks();
    1cc4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    1cc8:	e0fffd17 	ldw	r3,-12(fp)
    1ccc:	e0bff617 	ldw	r2,-40(fp)
    1cd0:	1885883a 	add	r2,r3,r2
    1cd4:	10c00044 	addi	r3,r2,1
    1cd8:	e0bffc17 	ldw	r2,-16(fp)
    1cdc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1ce0:	e0bffc17 	ldw	r2,-16(fp)
    1ce4:	10c00217 	ldw	r3,8(r2)
    1ce8:	e0bff617 	ldw	r2,-40(fp)
    1cec:	1880042e 	bgeu	r3,r2,1d00 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    1cf0:	e0bffc17 	ldw	r2,-16(fp)
    1cf4:	00c00044 	movi	r3,1
    1cf8:	10c00405 	stb	r3,16(r2)
    1cfc:	00000206 	br	1d08 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    1d00:	e0bffc17 	ldw	r2,-16(fp)
    1d04:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1d08:	e0bffc17 	ldw	r2,-16(fp)
    1d0c:	d0e00f04 	addi	r3,gp,-32708
    1d10:	e0fffa15 	stw	r3,-24(fp)
    1d14:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1d18:	e0bffb17 	ldw	r2,-20(fp)
    1d1c:	e0fffa17 	ldw	r3,-24(fp)
    1d20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1d24:	e0bffa17 	ldw	r2,-24(fp)
    1d28:	10c00017 	ldw	r3,0(r2)
    1d2c:	e0bffb17 	ldw	r2,-20(fp)
    1d30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1d34:	e0bffa17 	ldw	r2,-24(fp)
    1d38:	10800017 	ldw	r2,0(r2)
    1d3c:	e0fffb17 	ldw	r3,-20(fp)
    1d40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1d44:	e0bffa17 	ldw	r2,-24(fp)
    1d48:	e0fffb17 	ldw	r3,-20(fp)
    1d4c:	10c00015 	stw	r3,0(r2)
    1d50:	e0bff817 	ldw	r2,-32(fp)
    1d54:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1d58:	e0bff717 	ldw	r2,-36(fp)
    1d5c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    1d60:	0005883a 	mov	r2,zero
    1d64:	00000306 	br	1d74 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    1d68:	00bffa84 	movi	r2,-22
    1d6c:	00000106 	br	1d74 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    1d70:	00bfde84 	movi	r2,-134
  }
}
    1d74:	e037883a 	mov	sp,fp
    1d78:	df000017 	ldw	fp,0(sp)
    1d7c:	dec00104 	addi	sp,sp,4
    1d80:	f800283a 	ret

00001d84 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1d84:	defffa04 	addi	sp,sp,-24
    1d88:	dfc00515 	stw	ra,20(sp)
    1d8c:	df000415 	stw	fp,16(sp)
    1d90:	df000404 	addi	fp,sp,16
    1d94:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    1d98:	00800244 	movi	r2,9
    1d9c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    1da0:	014003f4 	movhi	r5,15
    1da4:	29509004 	addi	r5,r5,16960
    1da8:	e13ffd17 	ldw	r4,-12(fp)
    1dac:	00032180 	call	3218 <__mulsi3>
    1db0:	100b883a 	mov	r5,r2
    1db4:	0100bef4 	movhi	r4,763
    1db8:	213c2004 	addi	r4,r4,-3968
    1dbc:	000315c0 	call	315c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1dc0:	100b883a 	mov	r5,r2
    1dc4:	01200034 	movhi	r4,32768
    1dc8:	213fffc4 	addi	r4,r4,-1
    1dcc:	000315c0 	call	315c <__udivsi3>
    1dd0:	100b883a 	mov	r5,r2
    1dd4:	e13fff17 	ldw	r4,-4(fp)
    1dd8:	000315c0 	call	315c <__udivsi3>
    1ddc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1de0:	e0bffe17 	ldw	r2,-8(fp)
    1de4:	10002a26 	beq	r2,zero,1e90 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    1de8:	e03ffc15 	stw	zero,-16(fp)
    1dec:	00001706 	br	1e4c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1df0:	00a00034 	movhi	r2,32768
    1df4:	10bfffc4 	addi	r2,r2,-1
    1df8:	10bfffc4 	addi	r2,r2,-1
    1dfc:	103ffe1e 	bne	r2,zero,1df8 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    1e00:	014003f4 	movhi	r5,15
    1e04:	29509004 	addi	r5,r5,16960
    1e08:	e13ffd17 	ldw	r4,-12(fp)
    1e0c:	00032180 	call	3218 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1e10:	100b883a 	mov	r5,r2
    1e14:	0100bef4 	movhi	r4,763
    1e18:	213c2004 	addi	r4,r4,-3968
    1e1c:	000315c0 	call	315c <__udivsi3>
    1e20:	100b883a 	mov	r5,r2
    1e24:	01200034 	movhi	r4,32768
    1e28:	213fffc4 	addi	r4,r4,-1
    1e2c:	000315c0 	call	315c <__udivsi3>
    1e30:	1007883a 	mov	r3,r2
    1e34:	e0bfff17 	ldw	r2,-4(fp)
    1e38:	10c5c83a 	sub	r2,r2,r3
    1e3c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1e40:	e0bffc17 	ldw	r2,-16(fp)
    1e44:	10800044 	addi	r2,r2,1
    1e48:	e0bffc15 	stw	r2,-16(fp)
    1e4c:	e0fffc17 	ldw	r3,-16(fp)
    1e50:	e0bffe17 	ldw	r2,-8(fp)
    1e54:	18bfe616 	blt	r3,r2,1df0 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1e58:	014003f4 	movhi	r5,15
    1e5c:	29509004 	addi	r5,r5,16960
    1e60:	e13ffd17 	ldw	r4,-12(fp)
    1e64:	00032180 	call	3218 <__mulsi3>
    1e68:	100b883a 	mov	r5,r2
    1e6c:	0100bef4 	movhi	r4,763
    1e70:	213c2004 	addi	r4,r4,-3968
    1e74:	000315c0 	call	315c <__udivsi3>
    1e78:	e17fff17 	ldw	r5,-4(fp)
    1e7c:	1009883a 	mov	r4,r2
    1e80:	00032180 	call	3218 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1e84:	10bfffc4 	addi	r2,r2,-1
    1e88:	103ffe1e 	bne	r2,zero,1e84 <alt_busy_sleep+0x100>
    1e8c:	00000d06 	br	1ec4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1e90:	014003f4 	movhi	r5,15
    1e94:	29509004 	addi	r5,r5,16960
    1e98:	e13ffd17 	ldw	r4,-12(fp)
    1e9c:	00032180 	call	3218 <__mulsi3>
    1ea0:	100b883a 	mov	r5,r2
    1ea4:	0100bef4 	movhi	r4,763
    1ea8:	213c2004 	addi	r4,r4,-3968
    1eac:	000315c0 	call	315c <__udivsi3>
    1eb0:	e17fff17 	ldw	r5,-4(fp)
    1eb4:	1009883a 	mov	r4,r2
    1eb8:	00032180 	call	3218 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1ebc:	10bfffc4 	addi	r2,r2,-1
    1ec0:	00bffe16 	blt	zero,r2,1ebc <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    1ec4:	0005883a 	mov	r2,zero
}
    1ec8:	e037883a 	mov	sp,fp
    1ecc:	dfc00117 	ldw	ra,4(sp)
    1ed0:	df000017 	ldw	fp,0(sp)
    1ed4:	dec00204 	addi	sp,sp,8
    1ed8:	f800283a 	ret

00001edc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1edc:	defffe04 	addi	sp,sp,-8
    1ee0:	dfc00115 	stw	ra,4(sp)
    1ee4:	df000015 	stw	fp,0(sp)
    1ee8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1eec:	d0a00e17 	ldw	r2,-32712(gp)
    1ef0:	10000326 	beq	r2,zero,1f00 <alt_get_errno+0x24>
    1ef4:	d0a00e17 	ldw	r2,-32712(gp)
    1ef8:	103ee83a 	callr	r2
    1efc:	00000106 	br	1f04 <alt_get_errno+0x28>
    1f00:	d0a01c04 	addi	r2,gp,-32656
}
    1f04:	e037883a 	mov	sp,fp
    1f08:	dfc00117 	ldw	ra,4(sp)
    1f0c:	df000017 	ldw	fp,0(sp)
    1f10:	dec00204 	addi	sp,sp,8
    1f14:	f800283a 	ret

00001f18 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1f18:	defffb04 	addi	sp,sp,-20
    1f1c:	dfc00415 	stw	ra,16(sp)
    1f20:	df000315 	stw	fp,12(sp)
    1f24:	df000304 	addi	fp,sp,12
    1f28:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1f2c:	e0bfff17 	ldw	r2,-4(fp)
    1f30:	10000816 	blt	r2,zero,1f54 <close+0x3c>
    1f34:	01400304 	movi	r5,12
    1f38:	e13fff17 	ldw	r4,-4(fp)
    1f3c:	00032180 	call	3218 <__mulsi3>
    1f40:	1007883a 	mov	r3,r2
    1f44:	008000b4 	movhi	r2,2
    1f48:	10842c04 	addi	r2,r2,4272
    1f4c:	1885883a 	add	r2,r3,r2
    1f50:	00000106 	br	1f58 <close+0x40>
    1f54:	0005883a 	mov	r2,zero
    1f58:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    1f5c:	e0bffd17 	ldw	r2,-12(fp)
    1f60:	10001926 	beq	r2,zero,1fc8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    1f64:	e0bffd17 	ldw	r2,-12(fp)
    1f68:	10800017 	ldw	r2,0(r2)
    1f6c:	10800417 	ldw	r2,16(r2)
    1f70:	10000626 	beq	r2,zero,1f8c <close+0x74>
    1f74:	e0bffd17 	ldw	r2,-12(fp)
    1f78:	10800017 	ldw	r2,0(r2)
    1f7c:	10800417 	ldw	r2,16(r2)
    1f80:	e13ffd17 	ldw	r4,-12(fp)
    1f84:	103ee83a 	callr	r2
    1f88:	00000106 	br	1f90 <close+0x78>
    1f8c:	0005883a 	mov	r2,zero
    1f90:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    1f94:	e13fff17 	ldw	r4,-4(fp)
    1f98:	000267c0 	call	267c <alt_release_fd>
    if (rval < 0)
    1f9c:	e0bffe17 	ldw	r2,-8(fp)
    1fa0:	1000070e 	bge	r2,zero,1fc0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    1fa4:	0001edc0 	call	1edc <alt_get_errno>
    1fa8:	1007883a 	mov	r3,r2
    1fac:	e0bffe17 	ldw	r2,-8(fp)
    1fb0:	0085c83a 	sub	r2,zero,r2
    1fb4:	18800015 	stw	r2,0(r3)
      return -1;
    1fb8:	00bfffc4 	movi	r2,-1
    1fbc:	00000706 	br	1fdc <close+0xc4>
    }
    return 0;
    1fc0:	0005883a 	mov	r2,zero
    1fc4:	00000506 	br	1fdc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1fc8:	0001edc0 	call	1edc <alt_get_errno>
    1fcc:	1007883a 	mov	r3,r2
    1fd0:	00801444 	movi	r2,81
    1fd4:	18800015 	stw	r2,0(r3)
    return -1;
    1fd8:	00bfffc4 	movi	r2,-1
  }
}
    1fdc:	e037883a 	mov	sp,fp
    1fe0:	dfc00117 	ldw	ra,4(sp)
    1fe4:	df000017 	ldw	fp,0(sp)
    1fe8:	dec00204 	addi	sp,sp,8
    1fec:	f800283a 	ret

00001ff0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1ff0:	deffff04 	addi	sp,sp,-4
    1ff4:	df000015 	stw	fp,0(sp)
    1ff8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1ffc:	0001883a 	nop
    2000:	e037883a 	mov	sp,fp
    2004:	df000017 	ldw	fp,0(sp)
    2008:	dec00104 	addi	sp,sp,4
    200c:	f800283a 	ret

00002010 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2010:	defffc04 	addi	sp,sp,-16
    2014:	df000315 	stw	fp,12(sp)
    2018:	df000304 	addi	fp,sp,12
    201c:	e13ffd15 	stw	r4,-12(fp)
    2020:	e17ffe15 	stw	r5,-8(fp)
    2024:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2028:	e0bfff17 	ldw	r2,-4(fp)
}
    202c:	e037883a 	mov	sp,fp
    2030:	df000017 	ldw	fp,0(sp)
    2034:	dec00104 	addi	sp,sp,4
    2038:	f800283a 	ret

0000203c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    203c:	defffe04 	addi	sp,sp,-8
    2040:	dfc00115 	stw	ra,4(sp)
    2044:	df000015 	stw	fp,0(sp)
    2048:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    204c:	d0a00e17 	ldw	r2,-32712(gp)
    2050:	10000326 	beq	r2,zero,2060 <alt_get_errno+0x24>
    2054:	d0a00e17 	ldw	r2,-32712(gp)
    2058:	103ee83a 	callr	r2
    205c:	00000106 	br	2064 <alt_get_errno+0x28>
    2060:	d0a01c04 	addi	r2,gp,-32656
}
    2064:	e037883a 	mov	sp,fp
    2068:	dfc00117 	ldw	ra,4(sp)
    206c:	df000017 	ldw	fp,0(sp)
    2070:	dec00204 	addi	sp,sp,8
    2074:	f800283a 	ret

00002078 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2078:	defffa04 	addi	sp,sp,-24
    207c:	dfc00515 	stw	ra,20(sp)
    2080:	df000415 	stw	fp,16(sp)
    2084:	df000404 	addi	fp,sp,16
    2088:	e13ffe15 	stw	r4,-8(fp)
    208c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2090:	e0bffe17 	ldw	r2,-8(fp)
    2094:	10000326 	beq	r2,zero,20a4 <alt_dev_llist_insert+0x2c>
    2098:	e0bffe17 	ldw	r2,-8(fp)
    209c:	10800217 	ldw	r2,8(r2)
    20a0:	1000061e 	bne	r2,zero,20bc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    20a4:	000203c0 	call	203c <alt_get_errno>
    20a8:	1007883a 	mov	r3,r2
    20ac:	00800584 	movi	r2,22
    20b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    20b4:	00bffa84 	movi	r2,-22
    20b8:	00001306 	br	2108 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    20bc:	e0bffe17 	ldw	r2,-8(fp)
    20c0:	e0ffff17 	ldw	r3,-4(fp)
    20c4:	e0fffc15 	stw	r3,-16(fp)
    20c8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    20cc:	e0bffd17 	ldw	r2,-12(fp)
    20d0:	e0fffc17 	ldw	r3,-16(fp)
    20d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    20d8:	e0bffc17 	ldw	r2,-16(fp)
    20dc:	10c00017 	ldw	r3,0(r2)
    20e0:	e0bffd17 	ldw	r2,-12(fp)
    20e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    20e8:	e0bffc17 	ldw	r2,-16(fp)
    20ec:	10800017 	ldw	r2,0(r2)
    20f0:	e0fffd17 	ldw	r3,-12(fp)
    20f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    20f8:	e0bffc17 	ldw	r2,-16(fp)
    20fc:	e0fffd17 	ldw	r3,-12(fp)
    2100:	10c00015 	stw	r3,0(r2)

  return 0;  
    2104:	0005883a 	mov	r2,zero
}
    2108:	e037883a 	mov	sp,fp
    210c:	dfc00117 	ldw	ra,4(sp)
    2110:	df000017 	ldw	fp,0(sp)
    2114:	dec00204 	addi	sp,sp,8
    2118:	f800283a 	ret

0000211c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    211c:	defffd04 	addi	sp,sp,-12
    2120:	dfc00215 	stw	ra,8(sp)
    2124:	df000115 	stw	fp,4(sp)
    2128:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    212c:	00800034 	movhi	r2,0
    2130:	108c9c04 	addi	r2,r2,12912
    2134:	e0bfff15 	stw	r2,-4(fp)
    2138:	00000606 	br	2154 <_do_ctors+0x38>
        (*ctor) (); 
    213c:	e0bfff17 	ldw	r2,-4(fp)
    2140:	10800017 	ldw	r2,0(r2)
    2144:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2148:	e0bfff17 	ldw	r2,-4(fp)
    214c:	10bfff04 	addi	r2,r2,-4
    2150:	e0bfff15 	stw	r2,-4(fp)
    2154:	e0ffff17 	ldw	r3,-4(fp)
    2158:	00800034 	movhi	r2,0
    215c:	108c9d04 	addi	r2,r2,12916
    2160:	18bff62e 	bgeu	r3,r2,213c <_do_ctors+0x20>
        (*ctor) (); 
}
    2164:	0001883a 	nop
    2168:	e037883a 	mov	sp,fp
    216c:	dfc00117 	ldw	ra,4(sp)
    2170:	df000017 	ldw	fp,0(sp)
    2174:	dec00204 	addi	sp,sp,8
    2178:	f800283a 	ret

0000217c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    217c:	defffd04 	addi	sp,sp,-12
    2180:	dfc00215 	stw	ra,8(sp)
    2184:	df000115 	stw	fp,4(sp)
    2188:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    218c:	00800034 	movhi	r2,0
    2190:	108c9c04 	addi	r2,r2,12912
    2194:	e0bfff15 	stw	r2,-4(fp)
    2198:	00000606 	br	21b4 <_do_dtors+0x38>
        (*dtor) (); 
    219c:	e0bfff17 	ldw	r2,-4(fp)
    21a0:	10800017 	ldw	r2,0(r2)
    21a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    21a8:	e0bfff17 	ldw	r2,-4(fp)
    21ac:	10bfff04 	addi	r2,r2,-4
    21b0:	e0bfff15 	stw	r2,-4(fp)
    21b4:	e0ffff17 	ldw	r3,-4(fp)
    21b8:	00800034 	movhi	r2,0
    21bc:	108c9d04 	addi	r2,r2,12916
    21c0:	18bff62e 	bgeu	r3,r2,219c <_do_dtors+0x20>
        (*dtor) (); 
}
    21c4:	0001883a 	nop
    21c8:	e037883a 	mov	sp,fp
    21cc:	dfc00117 	ldw	ra,4(sp)
    21d0:	df000017 	ldw	fp,0(sp)
    21d4:	dec00204 	addi	sp,sp,8
    21d8:	f800283a 	ret

000021dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    21dc:	deffff04 	addi	sp,sp,-4
    21e0:	df000015 	stw	fp,0(sp)
    21e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    21e8:	0001883a 	nop
    21ec:	e037883a 	mov	sp,fp
    21f0:	df000017 	ldw	fp,0(sp)
    21f4:	dec00104 	addi	sp,sp,4
    21f8:	f800283a 	ret

000021fc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    21fc:	defffe04 	addi	sp,sp,-8
    2200:	df000115 	stw	fp,4(sp)
    2204:	df000104 	addi	fp,sp,4
    2208:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    220c:	e0bfff17 	ldw	r2,-4(fp)
    2210:	10bffe84 	addi	r2,r2,-6
    2214:	10c00428 	cmpgeui	r3,r2,16
    2218:	18001a1e 	bne	r3,zero,2284 <alt_exception_cause_generated_bad_addr+0x88>
    221c:	100690ba 	slli	r3,r2,2
    2220:	00800034 	movhi	r2,0
    2224:	10888d04 	addi	r2,r2,8756
    2228:	1885883a 	add	r2,r3,r2
    222c:	10800017 	ldw	r2,0(r2)
    2230:	1000683a 	jmp	r2
    2234:	00002274 	movhi	zero,137
    2238:	00002274 	movhi	zero,137
    223c:	00002284 	movi	zero,138
    2240:	00002284 	movi	zero,138
    2244:	00002284 	movi	zero,138
    2248:	00002274 	movhi	zero,137
    224c:	0000227c 	xorhi	zero,zero,137
    2250:	00002284 	movi	zero,138
    2254:	00002274 	movhi	zero,137
    2258:	00002274 	movhi	zero,137
    225c:	00002284 	movi	zero,138
    2260:	00002274 	movhi	zero,137
    2264:	0000227c 	xorhi	zero,zero,137
    2268:	00002284 	movi	zero,138
    226c:	00002284 	movi	zero,138
    2270:	00002274 	movhi	zero,137
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    2274:	00800044 	movi	r2,1
    2278:	00000306 	br	2288 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    227c:	0005883a 	mov	r2,zero
    2280:	00000106 	br	2288 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    2284:	0005883a 	mov	r2,zero
  }
}
    2288:	e037883a 	mov	sp,fp
    228c:	df000017 	ldw	fp,0(sp)
    2290:	dec00104 	addi	sp,sp,4
    2294:	f800283a 	ret

00002298 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2298:	defff804 	addi	sp,sp,-32
    229c:	dfc00715 	stw	ra,28(sp)
    22a0:	df000615 	stw	fp,24(sp)
    22a4:	dc000515 	stw	r16,20(sp)
    22a8:	df000604 	addi	fp,sp,24
    22ac:	e13ffb15 	stw	r4,-20(fp)
    22b0:	e17ffc15 	stw	r5,-16(fp)
    22b4:	e1bffd15 	stw	r6,-12(fp)
    22b8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    22bc:	e1bffe17 	ldw	r6,-8(fp)
    22c0:	e17ffd17 	ldw	r5,-12(fp)
    22c4:	e13ffc17 	ldw	r4,-16(fp)
    22c8:	00025200 	call	2520 <open>
    22cc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    22d0:	e0bffa17 	ldw	r2,-24(fp)
    22d4:	10002216 	blt	r2,zero,2360 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    22d8:	040000b4 	movhi	r16,2
    22dc:	84042c04 	addi	r16,r16,4272
    22e0:	e0bffa17 	ldw	r2,-24(fp)
    22e4:	01400304 	movi	r5,12
    22e8:	1009883a 	mov	r4,r2
    22ec:	00032180 	call	3218 <__mulsi3>
    22f0:	8085883a 	add	r2,r16,r2
    22f4:	10c00017 	ldw	r3,0(r2)
    22f8:	e0bffb17 	ldw	r2,-20(fp)
    22fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    2300:	040000b4 	movhi	r16,2
    2304:	84042c04 	addi	r16,r16,4272
    2308:	e0bffa17 	ldw	r2,-24(fp)
    230c:	01400304 	movi	r5,12
    2310:	1009883a 	mov	r4,r2
    2314:	00032180 	call	3218 <__mulsi3>
    2318:	8085883a 	add	r2,r16,r2
    231c:	10800104 	addi	r2,r2,4
    2320:	10c00017 	ldw	r3,0(r2)
    2324:	e0bffb17 	ldw	r2,-20(fp)
    2328:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    232c:	040000b4 	movhi	r16,2
    2330:	84042c04 	addi	r16,r16,4272
    2334:	e0bffa17 	ldw	r2,-24(fp)
    2338:	01400304 	movi	r5,12
    233c:	1009883a 	mov	r4,r2
    2340:	00032180 	call	3218 <__mulsi3>
    2344:	8085883a 	add	r2,r16,r2
    2348:	10800204 	addi	r2,r2,8
    234c:	10c00017 	ldw	r3,0(r2)
    2350:	e0bffb17 	ldw	r2,-20(fp)
    2354:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    2358:	e13ffa17 	ldw	r4,-24(fp)
    235c:	000267c0 	call	267c <alt_release_fd>
  }
} 
    2360:	0001883a 	nop
    2364:	e6ffff04 	addi	sp,fp,-4
    2368:	dfc00217 	ldw	ra,8(sp)
    236c:	df000117 	ldw	fp,4(sp)
    2370:	dc000017 	ldw	r16,0(sp)
    2374:	dec00304 	addi	sp,sp,12
    2378:	f800283a 	ret

0000237c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    237c:	defffb04 	addi	sp,sp,-20
    2380:	dfc00415 	stw	ra,16(sp)
    2384:	df000315 	stw	fp,12(sp)
    2388:	df000304 	addi	fp,sp,12
    238c:	e13ffd15 	stw	r4,-12(fp)
    2390:	e17ffe15 	stw	r5,-8(fp)
    2394:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2398:	01c07fc4 	movi	r7,511
    239c:	01800044 	movi	r6,1
    23a0:	e17ffd17 	ldw	r5,-12(fp)
    23a4:	010000b4 	movhi	r4,2
    23a8:	21042f04 	addi	r4,r4,4284
    23ac:	00022980 	call	2298 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    23b0:	01c07fc4 	movi	r7,511
    23b4:	000d883a 	mov	r6,zero
    23b8:	e17ffe17 	ldw	r5,-8(fp)
    23bc:	010000b4 	movhi	r4,2
    23c0:	21042c04 	addi	r4,r4,4272
    23c4:	00022980 	call	2298 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    23c8:	01c07fc4 	movi	r7,511
    23cc:	01800044 	movi	r6,1
    23d0:	e17fff17 	ldw	r5,-4(fp)
    23d4:	010000b4 	movhi	r4,2
    23d8:	21043204 	addi	r4,r4,4296
    23dc:	00022980 	call	2298 <alt_open_fd>
}  
    23e0:	0001883a 	nop
    23e4:	e037883a 	mov	sp,fp
    23e8:	dfc00117 	ldw	ra,4(sp)
    23ec:	df000017 	ldw	fp,0(sp)
    23f0:	dec00204 	addi	sp,sp,8
    23f4:	f800283a 	ret

000023f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    23f8:	defffe04 	addi	sp,sp,-8
    23fc:	dfc00115 	stw	ra,4(sp)
    2400:	df000015 	stw	fp,0(sp)
    2404:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2408:	d0a00e17 	ldw	r2,-32712(gp)
    240c:	10000326 	beq	r2,zero,241c <alt_get_errno+0x24>
    2410:	d0a00e17 	ldw	r2,-32712(gp)
    2414:	103ee83a 	callr	r2
    2418:	00000106 	br	2420 <alt_get_errno+0x28>
    241c:	d0a01c04 	addi	r2,gp,-32656
}
    2420:	e037883a 	mov	sp,fp
    2424:	dfc00117 	ldw	ra,4(sp)
    2428:	df000017 	ldw	fp,0(sp)
    242c:	dec00204 	addi	sp,sp,8
    2430:	f800283a 	ret

00002434 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    2434:	defffb04 	addi	sp,sp,-20
    2438:	dfc00415 	stw	ra,16(sp)
    243c:	df000315 	stw	fp,12(sp)
    2440:	dc000215 	stw	r16,8(sp)
    2444:	df000304 	addi	fp,sp,12
    2448:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    244c:	e0bffe17 	ldw	r2,-8(fp)
    2450:	10800217 	ldw	r2,8(r2)
    2454:	10d00034 	orhi	r3,r2,16384
    2458:	e0bffe17 	ldw	r2,-8(fp)
    245c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2460:	e03ffd15 	stw	zero,-12(fp)
    2464:	00002306 	br	24f4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2468:	040000b4 	movhi	r16,2
    246c:	84042c04 	addi	r16,r16,4272
    2470:	e0bffd17 	ldw	r2,-12(fp)
    2474:	01400304 	movi	r5,12
    2478:	1009883a 	mov	r4,r2
    247c:	00032180 	call	3218 <__mulsi3>
    2480:	8085883a 	add	r2,r16,r2
    2484:	10c00017 	ldw	r3,0(r2)
    2488:	e0bffe17 	ldw	r2,-8(fp)
    248c:	10800017 	ldw	r2,0(r2)
    2490:	1880151e 	bne	r3,r2,24e8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2494:	040000b4 	movhi	r16,2
    2498:	84042c04 	addi	r16,r16,4272
    249c:	e0bffd17 	ldw	r2,-12(fp)
    24a0:	01400304 	movi	r5,12
    24a4:	1009883a 	mov	r4,r2
    24a8:	00032180 	call	3218 <__mulsi3>
    24ac:	8085883a 	add	r2,r16,r2
    24b0:	10800204 	addi	r2,r2,8
    24b4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    24b8:	10000b0e 	bge	r2,zero,24e8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    24bc:	01400304 	movi	r5,12
    24c0:	e13ffd17 	ldw	r4,-12(fp)
    24c4:	00032180 	call	3218 <__mulsi3>
    24c8:	1007883a 	mov	r3,r2
    24cc:	008000b4 	movhi	r2,2
    24d0:	10842c04 	addi	r2,r2,4272
    24d4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    24d8:	e0bffe17 	ldw	r2,-8(fp)
    24dc:	18800226 	beq	r3,r2,24e8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    24e0:	00bffcc4 	movi	r2,-13
    24e4:	00000806 	br	2508 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    24e8:	e0bffd17 	ldw	r2,-12(fp)
    24ec:	10800044 	addi	r2,r2,1
    24f0:	e0bffd15 	stw	r2,-12(fp)
    24f4:	d0a00d17 	ldw	r2,-32716(gp)
    24f8:	1007883a 	mov	r3,r2
    24fc:	e0bffd17 	ldw	r2,-12(fp)
    2500:	18bfd92e 	bgeu	r3,r2,2468 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    2504:	0005883a 	mov	r2,zero
}
    2508:	e6ffff04 	addi	sp,fp,-4
    250c:	dfc00217 	ldw	ra,8(sp)
    2510:	df000117 	ldw	fp,4(sp)
    2514:	dc000017 	ldw	r16,0(sp)
    2518:	dec00304 	addi	sp,sp,12
    251c:	f800283a 	ret

00002520 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2520:	defff604 	addi	sp,sp,-40
    2524:	dfc00915 	stw	ra,36(sp)
    2528:	df000815 	stw	fp,32(sp)
    252c:	df000804 	addi	fp,sp,32
    2530:	e13ffd15 	stw	r4,-12(fp)
    2534:	e17ffe15 	stw	r5,-8(fp)
    2538:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    253c:	00bfffc4 	movi	r2,-1
    2540:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    2544:	00bffb44 	movi	r2,-19
    2548:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    254c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2550:	d1600b04 	addi	r5,gp,-32724
    2554:	e13ffd17 	ldw	r4,-12(fp)
    2558:	00028c80 	call	28c8 <alt_find_dev>
    255c:	e0bff815 	stw	r2,-32(fp)
    2560:	e0bff817 	ldw	r2,-32(fp)
    2564:	1000051e 	bne	r2,zero,257c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2568:	e13ffd17 	ldw	r4,-12(fp)
    256c:	00029580 	call	2958 <alt_find_file>
    2570:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    2574:	00800044 	movi	r2,1
    2578:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    257c:	e0bff817 	ldw	r2,-32(fp)
    2580:	10002b26 	beq	r2,zero,2630 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    2584:	e13ff817 	ldw	r4,-32(fp)
    2588:	0002a600 	call	2a60 <alt_get_fd>
    258c:	e0bff915 	stw	r2,-28(fp)
    2590:	e0bff917 	ldw	r2,-28(fp)
    2594:	1000030e 	bge	r2,zero,25a4 <open+0x84>
    {
      status = index;
    2598:	e0bff917 	ldw	r2,-28(fp)
    259c:	e0bffa15 	stw	r2,-24(fp)
    25a0:	00002506 	br	2638 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    25a4:	01400304 	movi	r5,12
    25a8:	e13ff917 	ldw	r4,-28(fp)
    25ac:	00032180 	call	3218 <__mulsi3>
    25b0:	1007883a 	mov	r3,r2
    25b4:	008000b4 	movhi	r2,2
    25b8:	10842c04 	addi	r2,r2,4272
    25bc:	1885883a 	add	r2,r3,r2
    25c0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    25c4:	e0fffe17 	ldw	r3,-8(fp)
    25c8:	00900034 	movhi	r2,16384
    25cc:	10bfffc4 	addi	r2,r2,-1
    25d0:	1886703a 	and	r3,r3,r2
    25d4:	e0bffc17 	ldw	r2,-16(fp)
    25d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    25dc:	e0bffb17 	ldw	r2,-20(fp)
    25e0:	1000051e 	bne	r2,zero,25f8 <open+0xd8>
    25e4:	e13ffc17 	ldw	r4,-16(fp)
    25e8:	00024340 	call	2434 <alt_file_locked>
    25ec:	e0bffa15 	stw	r2,-24(fp)
    25f0:	e0bffa17 	ldw	r2,-24(fp)
    25f4:	10001016 	blt	r2,zero,2638 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    25f8:	e0bff817 	ldw	r2,-32(fp)
    25fc:	10800317 	ldw	r2,12(r2)
    2600:	10000826 	beq	r2,zero,2624 <open+0x104>
    2604:	e0bff817 	ldw	r2,-32(fp)
    2608:	10800317 	ldw	r2,12(r2)
    260c:	e1ffff17 	ldw	r7,-4(fp)
    2610:	e1bffe17 	ldw	r6,-8(fp)
    2614:	e17ffd17 	ldw	r5,-12(fp)
    2618:	e13ffc17 	ldw	r4,-16(fp)
    261c:	103ee83a 	callr	r2
    2620:	00000106 	br	2628 <open+0x108>
    2624:	0005883a 	mov	r2,zero
    2628:	e0bffa15 	stw	r2,-24(fp)
    262c:	00000206 	br	2638 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    2630:	00bffb44 	movi	r2,-19
    2634:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2638:	e0bffa17 	ldw	r2,-24(fp)
    263c:	1000090e 	bge	r2,zero,2664 <open+0x144>
  {
    alt_release_fd (index);  
    2640:	e13ff917 	ldw	r4,-28(fp)
    2644:	000267c0 	call	267c <alt_release_fd>
    ALT_ERRNO = -status;
    2648:	00023f80 	call	23f8 <alt_get_errno>
    264c:	1007883a 	mov	r3,r2
    2650:	e0bffa17 	ldw	r2,-24(fp)
    2654:	0085c83a 	sub	r2,zero,r2
    2658:	18800015 	stw	r2,0(r3)
    return -1;
    265c:	00bfffc4 	movi	r2,-1
    2660:	00000106 	br	2668 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    2664:	e0bff917 	ldw	r2,-28(fp)
}
    2668:	e037883a 	mov	sp,fp
    266c:	dfc00117 	ldw	ra,4(sp)
    2670:	df000017 	ldw	fp,0(sp)
    2674:	dec00204 	addi	sp,sp,8
    2678:	f800283a 	ret

0000267c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    267c:	defffc04 	addi	sp,sp,-16
    2680:	dfc00315 	stw	ra,12(sp)
    2684:	df000215 	stw	fp,8(sp)
    2688:	dc000115 	stw	r16,4(sp)
    268c:	df000204 	addi	fp,sp,8
    2690:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    2694:	e0bffe17 	ldw	r2,-8(fp)
    2698:	108000d0 	cmplti	r2,r2,3
    269c:	1000111e 	bne	r2,zero,26e4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    26a0:	040000b4 	movhi	r16,2
    26a4:	84042c04 	addi	r16,r16,4272
    26a8:	e0bffe17 	ldw	r2,-8(fp)
    26ac:	01400304 	movi	r5,12
    26b0:	1009883a 	mov	r4,r2
    26b4:	00032180 	call	3218 <__mulsi3>
    26b8:	8085883a 	add	r2,r16,r2
    26bc:	10800204 	addi	r2,r2,8
    26c0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    26c4:	040000b4 	movhi	r16,2
    26c8:	84042c04 	addi	r16,r16,4272
    26cc:	e0bffe17 	ldw	r2,-8(fp)
    26d0:	01400304 	movi	r5,12
    26d4:	1009883a 	mov	r4,r2
    26d8:	00032180 	call	3218 <__mulsi3>
    26dc:	8085883a 	add	r2,r16,r2
    26e0:	10000015 	stw	zero,0(r2)
  }
}
    26e4:	0001883a 	nop
    26e8:	e6ffff04 	addi	sp,fp,-4
    26ec:	dfc00217 	ldw	ra,8(sp)
    26f0:	df000117 	ldw	fp,4(sp)
    26f4:	dc000017 	ldw	r16,0(sp)
    26f8:	dec00304 	addi	sp,sp,12
    26fc:	f800283a 	ret

00002700 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    2700:	defffa04 	addi	sp,sp,-24
    2704:	df000515 	stw	fp,20(sp)
    2708:	df000504 	addi	fp,sp,20
    270c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2710:	0005303a 	rdctl	r2,status
    2714:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2718:	e0fffc17 	ldw	r3,-16(fp)
    271c:	00bfff84 	movi	r2,-2
    2720:	1884703a 	and	r2,r3,r2
    2724:	1001703a 	wrctl	status,r2
  
  return context;
    2728:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    272c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    2730:	e0bfff17 	ldw	r2,-4(fp)
    2734:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2738:	e0bffd17 	ldw	r2,-12(fp)
    273c:	10800017 	ldw	r2,0(r2)
    2740:	e0fffd17 	ldw	r3,-12(fp)
    2744:	18c00117 	ldw	r3,4(r3)
    2748:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    274c:	e0bffd17 	ldw	r2,-12(fp)
    2750:	10800117 	ldw	r2,4(r2)
    2754:	e0fffd17 	ldw	r3,-12(fp)
    2758:	18c00017 	ldw	r3,0(r3)
    275c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2760:	e0bffd17 	ldw	r2,-12(fp)
    2764:	e0fffd17 	ldw	r3,-12(fp)
    2768:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    276c:	e0bffd17 	ldw	r2,-12(fp)
    2770:	e0fffd17 	ldw	r3,-12(fp)
    2774:	10c00015 	stw	r3,0(r2)
    2778:	e0bffb17 	ldw	r2,-20(fp)
    277c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2780:	e0bffe17 	ldw	r2,-8(fp)
    2784:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    2788:	0001883a 	nop
    278c:	e037883a 	mov	sp,fp
    2790:	df000017 	ldw	fp,0(sp)
    2794:	dec00104 	addi	sp,sp,4
    2798:	f800283a 	ret

0000279c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    279c:	defffb04 	addi	sp,sp,-20
    27a0:	dfc00415 	stw	ra,16(sp)
    27a4:	df000315 	stw	fp,12(sp)
    27a8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    27ac:	d0a00f17 	ldw	r2,-32708(gp)
    27b0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    27b4:	d0a01b17 	ldw	r2,-32660(gp)
    27b8:	10800044 	addi	r2,r2,1
    27bc:	d0a01b15 	stw	r2,-32660(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    27c0:	00002e06 	br	287c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    27c4:	e0bffd17 	ldw	r2,-12(fp)
    27c8:	10800017 	ldw	r2,0(r2)
    27cc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    27d0:	e0bffd17 	ldw	r2,-12(fp)
    27d4:	10800403 	ldbu	r2,16(r2)
    27d8:	10803fcc 	andi	r2,r2,255
    27dc:	10000426 	beq	r2,zero,27f0 <alt_tick+0x54>
    27e0:	d0a01b17 	ldw	r2,-32660(gp)
    27e4:	1000021e 	bne	r2,zero,27f0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    27e8:	e0bffd17 	ldw	r2,-12(fp)
    27ec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    27f0:	e0bffd17 	ldw	r2,-12(fp)
    27f4:	10800217 	ldw	r2,8(r2)
    27f8:	d0e01b17 	ldw	r3,-32660(gp)
    27fc:	18801d36 	bltu	r3,r2,2874 <alt_tick+0xd8>
    2800:	e0bffd17 	ldw	r2,-12(fp)
    2804:	10800403 	ldbu	r2,16(r2)
    2808:	10803fcc 	andi	r2,r2,255
    280c:	1000191e 	bne	r2,zero,2874 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    2810:	e0bffd17 	ldw	r2,-12(fp)
    2814:	10800317 	ldw	r2,12(r2)
    2818:	e0fffd17 	ldw	r3,-12(fp)
    281c:	18c00517 	ldw	r3,20(r3)
    2820:	1809883a 	mov	r4,r3
    2824:	103ee83a 	callr	r2
    2828:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    282c:	e0bfff17 	ldw	r2,-4(fp)
    2830:	1000031e 	bne	r2,zero,2840 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    2834:	e13ffd17 	ldw	r4,-12(fp)
    2838:	00027000 	call	2700 <alt_alarm_stop>
    283c:	00000d06 	br	2874 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    2840:	e0bffd17 	ldw	r2,-12(fp)
    2844:	10c00217 	ldw	r3,8(r2)
    2848:	e0bfff17 	ldw	r2,-4(fp)
    284c:	1887883a 	add	r3,r3,r2
    2850:	e0bffd17 	ldw	r2,-12(fp)
    2854:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2858:	e0bffd17 	ldw	r2,-12(fp)
    285c:	10c00217 	ldw	r3,8(r2)
    2860:	d0a01b17 	ldw	r2,-32660(gp)
    2864:	1880032e 	bgeu	r3,r2,2874 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    2868:	e0bffd17 	ldw	r2,-12(fp)
    286c:	00c00044 	movi	r3,1
    2870:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    2874:	e0bffe17 	ldw	r2,-8(fp)
    2878:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    287c:	e0fffd17 	ldw	r3,-12(fp)
    2880:	d0a00f04 	addi	r2,gp,-32708
    2884:	18bfcf1e 	bne	r3,r2,27c4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    2888:	0001883a 	nop
}
    288c:	0001883a 	nop
    2890:	e037883a 	mov	sp,fp
    2894:	dfc00117 	ldw	ra,4(sp)
    2898:	df000017 	ldw	fp,0(sp)
    289c:	dec00204 	addi	sp,sp,8
    28a0:	f800283a 	ret

000028a4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    28a4:	deffff04 	addi	sp,sp,-4
    28a8:	df000015 	stw	fp,0(sp)
    28ac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    28b0:	000170fa 	wrctl	ienable,zero
}
    28b4:	0001883a 	nop
    28b8:	e037883a 	mov	sp,fp
    28bc:	df000017 	ldw	fp,0(sp)
    28c0:	dec00104 	addi	sp,sp,4
    28c4:	f800283a 	ret

000028c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    28c8:	defffa04 	addi	sp,sp,-24
    28cc:	dfc00515 	stw	ra,20(sp)
    28d0:	df000415 	stw	fp,16(sp)
    28d4:	df000404 	addi	fp,sp,16
    28d8:	e13ffe15 	stw	r4,-8(fp)
    28dc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    28e0:	e0bfff17 	ldw	r2,-4(fp)
    28e4:	10800017 	ldw	r2,0(r2)
    28e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    28ec:	e13ffe17 	ldw	r4,-8(fp)
    28f0:	0002d340 	call	2d34 <strlen>
    28f4:	10800044 	addi	r2,r2,1
    28f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    28fc:	00000d06 	br	2934 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2900:	e0bffc17 	ldw	r2,-16(fp)
    2904:	10800217 	ldw	r2,8(r2)
    2908:	e0fffd17 	ldw	r3,-12(fp)
    290c:	180d883a 	mov	r6,r3
    2910:	e17ffe17 	ldw	r5,-8(fp)
    2914:	1009883a 	mov	r4,r2
    2918:	0002b700 	call	2b70 <memcmp>
    291c:	1000021e 	bne	r2,zero,2928 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    2920:	e0bffc17 	ldw	r2,-16(fp)
    2924:	00000706 	br	2944 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    2928:	e0bffc17 	ldw	r2,-16(fp)
    292c:	10800017 	ldw	r2,0(r2)
    2930:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2934:	e0fffc17 	ldw	r3,-16(fp)
    2938:	e0bfff17 	ldw	r2,-4(fp)
    293c:	18bff01e 	bne	r3,r2,2900 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    2940:	0005883a 	mov	r2,zero
}
    2944:	e037883a 	mov	sp,fp
    2948:	dfc00117 	ldw	ra,4(sp)
    294c:	df000017 	ldw	fp,0(sp)
    2950:	dec00204 	addi	sp,sp,8
    2954:	f800283a 	ret

00002958 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2958:	defffb04 	addi	sp,sp,-20
    295c:	dfc00415 	stw	ra,16(sp)
    2960:	df000315 	stw	fp,12(sp)
    2964:	df000304 	addi	fp,sp,12
    2968:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    296c:	d0a00917 	ldw	r2,-32732(gp)
    2970:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2974:	00003106 	br	2a3c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    2978:	e0bffd17 	ldw	r2,-12(fp)
    297c:	10800217 	ldw	r2,8(r2)
    2980:	1009883a 	mov	r4,r2
    2984:	0002d340 	call	2d34 <strlen>
    2988:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    298c:	e0bffd17 	ldw	r2,-12(fp)
    2990:	10c00217 	ldw	r3,8(r2)
    2994:	e0bffe17 	ldw	r2,-8(fp)
    2998:	10bfffc4 	addi	r2,r2,-1
    299c:	1885883a 	add	r2,r3,r2
    29a0:	10800003 	ldbu	r2,0(r2)
    29a4:	10803fcc 	andi	r2,r2,255
    29a8:	1080201c 	xori	r2,r2,128
    29ac:	10bfe004 	addi	r2,r2,-128
    29b0:	10800bd8 	cmpnei	r2,r2,47
    29b4:	1000031e 	bne	r2,zero,29c4 <alt_find_file+0x6c>
    {
      len -= 1;
    29b8:	e0bffe17 	ldw	r2,-8(fp)
    29bc:	10bfffc4 	addi	r2,r2,-1
    29c0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    29c4:	e0bffe17 	ldw	r2,-8(fp)
    29c8:	e0ffff17 	ldw	r3,-4(fp)
    29cc:	1885883a 	add	r2,r3,r2
    29d0:	10800003 	ldbu	r2,0(r2)
    29d4:	10803fcc 	andi	r2,r2,255
    29d8:	1080201c 	xori	r2,r2,128
    29dc:	10bfe004 	addi	r2,r2,-128
    29e0:	10800be0 	cmpeqi	r2,r2,47
    29e4:	1000081e 	bne	r2,zero,2a08 <alt_find_file+0xb0>
    29e8:	e0bffe17 	ldw	r2,-8(fp)
    29ec:	e0ffff17 	ldw	r3,-4(fp)
    29f0:	1885883a 	add	r2,r3,r2
    29f4:	10800003 	ldbu	r2,0(r2)
    29f8:	10803fcc 	andi	r2,r2,255
    29fc:	1080201c 	xori	r2,r2,128
    2a00:	10bfe004 	addi	r2,r2,-128
    2a04:	10000a1e 	bne	r2,zero,2a30 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    2a08:	e0bffd17 	ldw	r2,-12(fp)
    2a0c:	10800217 	ldw	r2,8(r2)
    2a10:	e0fffe17 	ldw	r3,-8(fp)
    2a14:	180d883a 	mov	r6,r3
    2a18:	e17fff17 	ldw	r5,-4(fp)
    2a1c:	1009883a 	mov	r4,r2
    2a20:	0002b700 	call	2b70 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2a24:	1000021e 	bne	r2,zero,2a30 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    2a28:	e0bffd17 	ldw	r2,-12(fp)
    2a2c:	00000706 	br	2a4c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    2a30:	e0bffd17 	ldw	r2,-12(fp)
    2a34:	10800017 	ldw	r2,0(r2)
    2a38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2a3c:	e0fffd17 	ldw	r3,-12(fp)
    2a40:	d0a00904 	addi	r2,gp,-32732
    2a44:	18bfcc1e 	bne	r3,r2,2978 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    2a48:	0005883a 	mov	r2,zero
}
    2a4c:	e037883a 	mov	sp,fp
    2a50:	dfc00117 	ldw	ra,4(sp)
    2a54:	df000017 	ldw	fp,0(sp)
    2a58:	dec00204 	addi	sp,sp,8
    2a5c:	f800283a 	ret

00002a60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2a60:	defffa04 	addi	sp,sp,-24
    2a64:	dfc00515 	stw	ra,20(sp)
    2a68:	df000415 	stw	fp,16(sp)
    2a6c:	dc000315 	stw	r16,12(sp)
    2a70:	df000404 	addi	fp,sp,16
    2a74:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    2a78:	00bffa04 	movi	r2,-24
    2a7c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2a80:	e03ffc15 	stw	zero,-16(fp)
    2a84:	00001d06 	br	2afc <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    2a88:	040000b4 	movhi	r16,2
    2a8c:	84042c04 	addi	r16,r16,4272
    2a90:	e0bffc17 	ldw	r2,-16(fp)
    2a94:	01400304 	movi	r5,12
    2a98:	1009883a 	mov	r4,r2
    2a9c:	00032180 	call	3218 <__mulsi3>
    2aa0:	8085883a 	add	r2,r16,r2
    2aa4:	10800017 	ldw	r2,0(r2)
    2aa8:	1000111e 	bne	r2,zero,2af0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    2aac:	040000b4 	movhi	r16,2
    2ab0:	84042c04 	addi	r16,r16,4272
    2ab4:	e0bffc17 	ldw	r2,-16(fp)
    2ab8:	01400304 	movi	r5,12
    2abc:	1009883a 	mov	r4,r2
    2ac0:	00032180 	call	3218 <__mulsi3>
    2ac4:	8085883a 	add	r2,r16,r2
    2ac8:	e0fffe17 	ldw	r3,-8(fp)
    2acc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    2ad0:	d0e00d17 	ldw	r3,-32716(gp)
    2ad4:	e0bffc17 	ldw	r2,-16(fp)
    2ad8:	1880020e 	bge	r3,r2,2ae4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    2adc:	e0bffc17 	ldw	r2,-16(fp)
    2ae0:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
    2ae4:	e0bffc17 	ldw	r2,-16(fp)
    2ae8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    2aec:	00000606 	br	2b08 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2af0:	e0bffc17 	ldw	r2,-16(fp)
    2af4:	10800044 	addi	r2,r2,1
    2af8:	e0bffc15 	stw	r2,-16(fp)
    2afc:	e0bffc17 	ldw	r2,-16(fp)
    2b00:	10800810 	cmplti	r2,r2,32
    2b04:	103fe01e 	bne	r2,zero,2a88 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    2b08:	e0bffd17 	ldw	r2,-12(fp)
}
    2b0c:	e6ffff04 	addi	sp,fp,-4
    2b10:	dfc00217 	ldw	ra,8(sp)
    2b14:	df000117 	ldw	fp,4(sp)
    2b18:	dc000017 	ldw	r16,0(sp)
    2b1c:	dec00304 	addi	sp,sp,12
    2b20:	f800283a 	ret

00002b24 <atexit>:
    2b24:	200b883a 	mov	r5,r4
    2b28:	000f883a 	mov	r7,zero
    2b2c:	000d883a 	mov	r6,zero
    2b30:	0009883a 	mov	r4,zero
    2b34:	0002dcc1 	jmpi	2dcc <__register_exitproc>

00002b38 <exit>:
    2b38:	defffe04 	addi	sp,sp,-8
    2b3c:	000b883a 	mov	r5,zero
    2b40:	dc000015 	stw	r16,0(sp)
    2b44:	dfc00115 	stw	ra,4(sp)
    2b48:	2021883a 	mov	r16,r4
    2b4c:	0002ee40 	call	2ee4 <__call_exitprocs>
    2b50:	008000b4 	movhi	r2,2
    2b54:	1085a604 	addi	r2,r2,5784
    2b58:	11000017 	ldw	r4,0(r2)
    2b5c:	20800f17 	ldw	r2,60(r4)
    2b60:	10000126 	beq	r2,zero,2b68 <exit+0x30>
    2b64:	103ee83a 	callr	r2
    2b68:	8009883a 	mov	r4,r16
    2b6c:	00032400 	call	3240 <_exit>

00002b70 <memcmp>:
    2b70:	01c000c4 	movi	r7,3
    2b74:	3980192e 	bgeu	r7,r6,2bdc <memcmp+0x6c>
    2b78:	2144b03a 	or	r2,r4,r5
    2b7c:	11c4703a 	and	r2,r2,r7
    2b80:	10000f26 	beq	r2,zero,2bc0 <memcmp+0x50>
    2b84:	20800003 	ldbu	r2,0(r4)
    2b88:	28c00003 	ldbu	r3,0(r5)
    2b8c:	10c0151e 	bne	r2,r3,2be4 <memcmp+0x74>
    2b90:	31bfff84 	addi	r6,r6,-2
    2b94:	01ffffc4 	movi	r7,-1
    2b98:	00000406 	br	2bac <memcmp+0x3c>
    2b9c:	20800003 	ldbu	r2,0(r4)
    2ba0:	28c00003 	ldbu	r3,0(r5)
    2ba4:	31bfffc4 	addi	r6,r6,-1
    2ba8:	10c00e1e 	bne	r2,r3,2be4 <memcmp+0x74>
    2bac:	21000044 	addi	r4,r4,1
    2bb0:	29400044 	addi	r5,r5,1
    2bb4:	31fff91e 	bne	r6,r7,2b9c <memcmp+0x2c>
    2bb8:	0005883a 	mov	r2,zero
    2bbc:	f800283a 	ret
    2bc0:	20c00017 	ldw	r3,0(r4)
    2bc4:	28800017 	ldw	r2,0(r5)
    2bc8:	18bfee1e 	bne	r3,r2,2b84 <memcmp+0x14>
    2bcc:	31bfff04 	addi	r6,r6,-4
    2bd0:	21000104 	addi	r4,r4,4
    2bd4:	29400104 	addi	r5,r5,4
    2bd8:	39bff936 	bltu	r7,r6,2bc0 <memcmp+0x50>
    2bdc:	303fe91e 	bne	r6,zero,2b84 <memcmp+0x14>
    2be0:	003ff506 	br	2bb8 <memcmp+0x48>
    2be4:	10c5c83a 	sub	r2,r2,r3
    2be8:	f800283a 	ret

00002bec <memcpy>:
    2bec:	defffd04 	addi	sp,sp,-12
    2bf0:	dfc00215 	stw	ra,8(sp)
    2bf4:	dc400115 	stw	r17,4(sp)
    2bf8:	dc000015 	stw	r16,0(sp)
    2bfc:	00c003c4 	movi	r3,15
    2c00:	2005883a 	mov	r2,r4
    2c04:	1980452e 	bgeu	r3,r6,2d1c <memcpy+0x130>
    2c08:	2906b03a 	or	r3,r5,r4
    2c0c:	18c000cc 	andi	r3,r3,3
    2c10:	1800441e 	bne	r3,zero,2d24 <memcpy+0x138>
    2c14:	347ffc04 	addi	r17,r6,-16
    2c18:	8822d13a 	srli	r17,r17,4
    2c1c:	28c00104 	addi	r3,r5,4
    2c20:	23400104 	addi	r13,r4,4
    2c24:	8820913a 	slli	r16,r17,4
    2c28:	2b000204 	addi	r12,r5,8
    2c2c:	22c00204 	addi	r11,r4,8
    2c30:	84000504 	addi	r16,r16,20
    2c34:	2a800304 	addi	r10,r5,12
    2c38:	22400304 	addi	r9,r4,12
    2c3c:	2c21883a 	add	r16,r5,r16
    2c40:	2811883a 	mov	r8,r5
    2c44:	200f883a 	mov	r7,r4
    2c48:	41000017 	ldw	r4,0(r8)
    2c4c:	1fc00017 	ldw	ra,0(r3)
    2c50:	63c00017 	ldw	r15,0(r12)
    2c54:	39000015 	stw	r4,0(r7)
    2c58:	53800017 	ldw	r14,0(r10)
    2c5c:	6fc00015 	stw	ra,0(r13)
    2c60:	5bc00015 	stw	r15,0(r11)
    2c64:	4b800015 	stw	r14,0(r9)
    2c68:	18c00404 	addi	r3,r3,16
    2c6c:	39c00404 	addi	r7,r7,16
    2c70:	42000404 	addi	r8,r8,16
    2c74:	6b400404 	addi	r13,r13,16
    2c78:	63000404 	addi	r12,r12,16
    2c7c:	5ac00404 	addi	r11,r11,16
    2c80:	52800404 	addi	r10,r10,16
    2c84:	4a400404 	addi	r9,r9,16
    2c88:	1c3fef1e 	bne	r3,r16,2c48 <memcpy+0x5c>
    2c8c:	89c00044 	addi	r7,r17,1
    2c90:	380e913a 	slli	r7,r7,4
    2c94:	310003cc 	andi	r4,r6,15
    2c98:	02c000c4 	movi	r11,3
    2c9c:	11c7883a 	add	r3,r2,r7
    2ca0:	29cb883a 	add	r5,r5,r7
    2ca4:	5900212e 	bgeu	r11,r4,2d2c <memcpy+0x140>
    2ca8:	1813883a 	mov	r9,r3
    2cac:	2811883a 	mov	r8,r5
    2cb0:	200f883a 	mov	r7,r4
    2cb4:	42800017 	ldw	r10,0(r8)
    2cb8:	4a400104 	addi	r9,r9,4
    2cbc:	39ffff04 	addi	r7,r7,-4
    2cc0:	4abfff15 	stw	r10,-4(r9)
    2cc4:	42000104 	addi	r8,r8,4
    2cc8:	59fffa36 	bltu	r11,r7,2cb4 <memcpy+0xc8>
    2ccc:	213fff04 	addi	r4,r4,-4
    2cd0:	2008d0ba 	srli	r4,r4,2
    2cd4:	318000cc 	andi	r6,r6,3
    2cd8:	21000044 	addi	r4,r4,1
    2cdc:	2109883a 	add	r4,r4,r4
    2ce0:	2109883a 	add	r4,r4,r4
    2ce4:	1907883a 	add	r3,r3,r4
    2ce8:	290b883a 	add	r5,r5,r4
    2cec:	30000626 	beq	r6,zero,2d08 <memcpy+0x11c>
    2cf0:	198d883a 	add	r6,r3,r6
    2cf4:	29c00003 	ldbu	r7,0(r5)
    2cf8:	18c00044 	addi	r3,r3,1
    2cfc:	29400044 	addi	r5,r5,1
    2d00:	19ffffc5 	stb	r7,-1(r3)
    2d04:	19bffb1e 	bne	r3,r6,2cf4 <memcpy+0x108>
    2d08:	dfc00217 	ldw	ra,8(sp)
    2d0c:	dc400117 	ldw	r17,4(sp)
    2d10:	dc000017 	ldw	r16,0(sp)
    2d14:	dec00304 	addi	sp,sp,12
    2d18:	f800283a 	ret
    2d1c:	2007883a 	mov	r3,r4
    2d20:	003ff206 	br	2cec <memcpy+0x100>
    2d24:	2007883a 	mov	r3,r4
    2d28:	003ff106 	br	2cf0 <memcpy+0x104>
    2d2c:	200d883a 	mov	r6,r4
    2d30:	003fee06 	br	2cec <memcpy+0x100>

00002d34 <strlen>:
    2d34:	208000cc 	andi	r2,r4,3
    2d38:	10002026 	beq	r2,zero,2dbc <strlen+0x88>
    2d3c:	20800007 	ldb	r2,0(r4)
    2d40:	10002026 	beq	r2,zero,2dc4 <strlen+0x90>
    2d44:	2005883a 	mov	r2,r4
    2d48:	00000206 	br	2d54 <strlen+0x20>
    2d4c:	10c00007 	ldb	r3,0(r2)
    2d50:	18001826 	beq	r3,zero,2db4 <strlen+0x80>
    2d54:	10800044 	addi	r2,r2,1
    2d58:	10c000cc 	andi	r3,r2,3
    2d5c:	183ffb1e 	bne	r3,zero,2d4c <strlen+0x18>
    2d60:	10c00017 	ldw	r3,0(r2)
    2d64:	01ffbff4 	movhi	r7,65279
    2d68:	39ffbfc4 	addi	r7,r7,-257
    2d6c:	00ca303a 	nor	r5,zero,r3
    2d70:	01a02074 	movhi	r6,32897
    2d74:	19c7883a 	add	r3,r3,r7
    2d78:	31a02004 	addi	r6,r6,-32640
    2d7c:	1946703a 	and	r3,r3,r5
    2d80:	1986703a 	and	r3,r3,r6
    2d84:	1800091e 	bne	r3,zero,2dac <strlen+0x78>
    2d88:	10800104 	addi	r2,r2,4
    2d8c:	10c00017 	ldw	r3,0(r2)
    2d90:	19cb883a 	add	r5,r3,r7
    2d94:	00c6303a 	nor	r3,zero,r3
    2d98:	28c6703a 	and	r3,r5,r3
    2d9c:	1986703a 	and	r3,r3,r6
    2da0:	183ff926 	beq	r3,zero,2d88 <strlen+0x54>
    2da4:	00000106 	br	2dac <strlen+0x78>
    2da8:	10800044 	addi	r2,r2,1
    2dac:	10c00007 	ldb	r3,0(r2)
    2db0:	183ffd1e 	bne	r3,zero,2da8 <strlen+0x74>
    2db4:	1105c83a 	sub	r2,r2,r4
    2db8:	f800283a 	ret
    2dbc:	2005883a 	mov	r2,r4
    2dc0:	003fe706 	br	2d60 <strlen+0x2c>
    2dc4:	0005883a 	mov	r2,zero
    2dc8:	f800283a 	ret

00002dcc <__register_exitproc>:
    2dcc:	defffa04 	addi	sp,sp,-24
    2dd0:	dc000315 	stw	r16,12(sp)
    2dd4:	040000b4 	movhi	r16,2
    2dd8:	8405a604 	addi	r16,r16,5784
    2ddc:	80c00017 	ldw	r3,0(r16)
    2de0:	dc400415 	stw	r17,16(sp)
    2de4:	dfc00515 	stw	ra,20(sp)
    2de8:	18805217 	ldw	r2,328(r3)
    2dec:	2023883a 	mov	r17,r4
    2df0:	10003726 	beq	r2,zero,2ed0 <__register_exitproc+0x104>
    2df4:	10c00117 	ldw	r3,4(r2)
    2df8:	010007c4 	movi	r4,31
    2dfc:	20c00e16 	blt	r4,r3,2e38 <__register_exitproc+0x6c>
    2e00:	1a000044 	addi	r8,r3,1
    2e04:	8800221e 	bne	r17,zero,2e90 <__register_exitproc+0xc4>
    2e08:	18c00084 	addi	r3,r3,2
    2e0c:	18c7883a 	add	r3,r3,r3
    2e10:	18c7883a 	add	r3,r3,r3
    2e14:	12000115 	stw	r8,4(r2)
    2e18:	10c7883a 	add	r3,r2,r3
    2e1c:	19400015 	stw	r5,0(r3)
    2e20:	0005883a 	mov	r2,zero
    2e24:	dfc00517 	ldw	ra,20(sp)
    2e28:	dc400417 	ldw	r17,16(sp)
    2e2c:	dc000317 	ldw	r16,12(sp)
    2e30:	dec00604 	addi	sp,sp,24
    2e34:	f800283a 	ret
    2e38:	00800034 	movhi	r2,0
    2e3c:	10800004 	addi	r2,r2,0
    2e40:	10002626 	beq	r2,zero,2edc <__register_exitproc+0x110>
    2e44:	01006404 	movi	r4,400
    2e48:	d9400015 	stw	r5,0(sp)
    2e4c:	d9800115 	stw	r6,4(sp)
    2e50:	d9c00215 	stw	r7,8(sp)
    2e54:	00000000 	call	0 <__alt_mem_ROM>
    2e58:	d9400017 	ldw	r5,0(sp)
    2e5c:	d9800117 	ldw	r6,4(sp)
    2e60:	d9c00217 	ldw	r7,8(sp)
    2e64:	10001d26 	beq	r2,zero,2edc <__register_exitproc+0x110>
    2e68:	81000017 	ldw	r4,0(r16)
    2e6c:	10000115 	stw	zero,4(r2)
    2e70:	02000044 	movi	r8,1
    2e74:	22405217 	ldw	r9,328(r4)
    2e78:	0007883a 	mov	r3,zero
    2e7c:	12400015 	stw	r9,0(r2)
    2e80:	20805215 	stw	r2,328(r4)
    2e84:	10006215 	stw	zero,392(r2)
    2e88:	10006315 	stw	zero,396(r2)
    2e8c:	883fde26 	beq	r17,zero,2e08 <__register_exitproc+0x3c>
    2e90:	18c9883a 	add	r4,r3,r3
    2e94:	2109883a 	add	r4,r4,r4
    2e98:	1109883a 	add	r4,r2,r4
    2e9c:	21802215 	stw	r6,136(r4)
    2ea0:	01800044 	movi	r6,1
    2ea4:	12406217 	ldw	r9,392(r2)
    2ea8:	30cc983a 	sll	r6,r6,r3
    2eac:	4992b03a 	or	r9,r9,r6
    2eb0:	12406215 	stw	r9,392(r2)
    2eb4:	21c04215 	stw	r7,264(r4)
    2eb8:	01000084 	movi	r4,2
    2ebc:	893fd21e 	bne	r17,r4,2e08 <__register_exitproc+0x3c>
    2ec0:	11006317 	ldw	r4,396(r2)
    2ec4:	218cb03a 	or	r6,r4,r6
    2ec8:	11806315 	stw	r6,396(r2)
    2ecc:	003fce06 	br	2e08 <__register_exitproc+0x3c>
    2ed0:	18805304 	addi	r2,r3,332
    2ed4:	18805215 	stw	r2,328(r3)
    2ed8:	003fc606 	br	2df4 <__register_exitproc+0x28>
    2edc:	00bfffc4 	movi	r2,-1
    2ee0:	003fd006 	br	2e24 <__register_exitproc+0x58>

00002ee4 <__call_exitprocs>:
    2ee4:	defff504 	addi	sp,sp,-44
    2ee8:	df000915 	stw	fp,36(sp)
    2eec:	dd400615 	stw	r21,24(sp)
    2ef0:	dc800315 	stw	r18,12(sp)
    2ef4:	dfc00a15 	stw	ra,40(sp)
    2ef8:	ddc00815 	stw	r23,32(sp)
    2efc:	dd800715 	stw	r22,28(sp)
    2f00:	dd000515 	stw	r20,20(sp)
    2f04:	dcc00415 	stw	r19,16(sp)
    2f08:	dc400215 	stw	r17,8(sp)
    2f0c:	dc000115 	stw	r16,4(sp)
    2f10:	d9000015 	stw	r4,0(sp)
    2f14:	2839883a 	mov	fp,r5
    2f18:	04800044 	movi	r18,1
    2f1c:	057fffc4 	movi	r21,-1
    2f20:	008000b4 	movhi	r2,2
    2f24:	1085a604 	addi	r2,r2,5784
    2f28:	12000017 	ldw	r8,0(r2)
    2f2c:	45005217 	ldw	r20,328(r8)
    2f30:	44c05204 	addi	r19,r8,328
    2f34:	a0001c26 	beq	r20,zero,2fa8 <__call_exitprocs+0xc4>
    2f38:	a0800117 	ldw	r2,4(r20)
    2f3c:	15ffffc4 	addi	r23,r2,-1
    2f40:	b8000d16 	blt	r23,zero,2f78 <__call_exitprocs+0x94>
    2f44:	14000044 	addi	r16,r2,1
    2f48:	8421883a 	add	r16,r16,r16
    2f4c:	8421883a 	add	r16,r16,r16
    2f50:	84402004 	addi	r17,r16,128
    2f54:	a463883a 	add	r17,r20,r17
    2f58:	a421883a 	add	r16,r20,r16
    2f5c:	e0001e26 	beq	fp,zero,2fd8 <__call_exitprocs+0xf4>
    2f60:	80804017 	ldw	r2,256(r16)
    2f64:	e0801c26 	beq	fp,r2,2fd8 <__call_exitprocs+0xf4>
    2f68:	bdffffc4 	addi	r23,r23,-1
    2f6c:	843fff04 	addi	r16,r16,-4
    2f70:	8c7fff04 	addi	r17,r17,-4
    2f74:	bd7ff91e 	bne	r23,r21,2f5c <__call_exitprocs+0x78>
    2f78:	00800034 	movhi	r2,0
    2f7c:	10800004 	addi	r2,r2,0
    2f80:	10000926 	beq	r2,zero,2fa8 <__call_exitprocs+0xc4>
    2f84:	a0800117 	ldw	r2,4(r20)
    2f88:	1000301e 	bne	r2,zero,304c <__call_exitprocs+0x168>
    2f8c:	a0800017 	ldw	r2,0(r20)
    2f90:	10003226 	beq	r2,zero,305c <__call_exitprocs+0x178>
    2f94:	a009883a 	mov	r4,r20
    2f98:	98800015 	stw	r2,0(r19)
    2f9c:	00000000 	call	0 <__alt_mem_ROM>
    2fa0:	9d000017 	ldw	r20,0(r19)
    2fa4:	a03fe41e 	bne	r20,zero,2f38 <__call_exitprocs+0x54>
    2fa8:	dfc00a17 	ldw	ra,40(sp)
    2fac:	df000917 	ldw	fp,36(sp)
    2fb0:	ddc00817 	ldw	r23,32(sp)
    2fb4:	dd800717 	ldw	r22,28(sp)
    2fb8:	dd400617 	ldw	r21,24(sp)
    2fbc:	dd000517 	ldw	r20,20(sp)
    2fc0:	dcc00417 	ldw	r19,16(sp)
    2fc4:	dc800317 	ldw	r18,12(sp)
    2fc8:	dc400217 	ldw	r17,8(sp)
    2fcc:	dc000117 	ldw	r16,4(sp)
    2fd0:	dec00b04 	addi	sp,sp,44
    2fd4:	f800283a 	ret
    2fd8:	a0800117 	ldw	r2,4(r20)
    2fdc:	80c00017 	ldw	r3,0(r16)
    2fe0:	10bfffc4 	addi	r2,r2,-1
    2fe4:	15c01426 	beq	r2,r23,3038 <__call_exitprocs+0x154>
    2fe8:	80000015 	stw	zero,0(r16)
    2fec:	183fde26 	beq	r3,zero,2f68 <__call_exitprocs+0x84>
    2ff0:	95c8983a 	sll	r4,r18,r23
    2ff4:	a0806217 	ldw	r2,392(r20)
    2ff8:	a5800117 	ldw	r22,4(r20)
    2ffc:	2084703a 	and	r2,r4,r2
    3000:	10000b26 	beq	r2,zero,3030 <__call_exitprocs+0x14c>
    3004:	a0806317 	ldw	r2,396(r20)
    3008:	2088703a 	and	r4,r4,r2
    300c:	20000c1e 	bne	r4,zero,3040 <__call_exitprocs+0x15c>
    3010:	89400017 	ldw	r5,0(r17)
    3014:	d9000017 	ldw	r4,0(sp)
    3018:	183ee83a 	callr	r3
    301c:	a0800117 	ldw	r2,4(r20)
    3020:	15bfbf1e 	bne	r2,r22,2f20 <__call_exitprocs+0x3c>
    3024:	98800017 	ldw	r2,0(r19)
    3028:	153fcf26 	beq	r2,r20,2f68 <__call_exitprocs+0x84>
    302c:	003fbc06 	br	2f20 <__call_exitprocs+0x3c>
    3030:	183ee83a 	callr	r3
    3034:	003ff906 	br	301c <__call_exitprocs+0x138>
    3038:	a5c00115 	stw	r23,4(r20)
    303c:	003feb06 	br	2fec <__call_exitprocs+0x108>
    3040:	89000017 	ldw	r4,0(r17)
    3044:	183ee83a 	callr	r3
    3048:	003ff406 	br	301c <__call_exitprocs+0x138>
    304c:	a0800017 	ldw	r2,0(r20)
    3050:	a027883a 	mov	r19,r20
    3054:	1029883a 	mov	r20,r2
    3058:	003fb606 	br	2f34 <__call_exitprocs+0x50>
    305c:	0005883a 	mov	r2,zero
    3060:	003ffb06 	br	3050 <__call_exitprocs+0x16c>

00003064 <__divsi3>:
    3064:	20001b16 	blt	r4,zero,30d4 <__divsi3+0x70>
    3068:	000f883a 	mov	r7,zero
    306c:	28001616 	blt	r5,zero,30c8 <__divsi3+0x64>
    3070:	200d883a 	mov	r6,r4
    3074:	29001a2e 	bgeu	r5,r4,30e0 <__divsi3+0x7c>
    3078:	00800804 	movi	r2,32
    307c:	00c00044 	movi	r3,1
    3080:	00000106 	br	3088 <__divsi3+0x24>
    3084:	10000d26 	beq	r2,zero,30bc <__divsi3+0x58>
    3088:	294b883a 	add	r5,r5,r5
    308c:	10bfffc4 	addi	r2,r2,-1
    3090:	18c7883a 	add	r3,r3,r3
    3094:	293ffb36 	bltu	r5,r4,3084 <__divsi3+0x20>
    3098:	0005883a 	mov	r2,zero
    309c:	18000726 	beq	r3,zero,30bc <__divsi3+0x58>
    30a0:	0005883a 	mov	r2,zero
    30a4:	31400236 	bltu	r6,r5,30b0 <__divsi3+0x4c>
    30a8:	314dc83a 	sub	r6,r6,r5
    30ac:	10c4b03a 	or	r2,r2,r3
    30b0:	1806d07a 	srli	r3,r3,1
    30b4:	280ad07a 	srli	r5,r5,1
    30b8:	183ffa1e 	bne	r3,zero,30a4 <__divsi3+0x40>
    30bc:	38000126 	beq	r7,zero,30c4 <__divsi3+0x60>
    30c0:	0085c83a 	sub	r2,zero,r2
    30c4:	f800283a 	ret
    30c8:	014bc83a 	sub	r5,zero,r5
    30cc:	39c0005c 	xori	r7,r7,1
    30d0:	003fe706 	br	3070 <__divsi3+0xc>
    30d4:	0109c83a 	sub	r4,zero,r4
    30d8:	01c00044 	movi	r7,1
    30dc:	003fe306 	br	306c <__divsi3+0x8>
    30e0:	00c00044 	movi	r3,1
    30e4:	003fee06 	br	30a0 <__divsi3+0x3c>

000030e8 <__modsi3>:
    30e8:	20001716 	blt	r4,zero,3148 <__modsi3+0x60>
    30ec:	000f883a 	mov	r7,zero
    30f0:	2005883a 	mov	r2,r4
    30f4:	28001216 	blt	r5,zero,3140 <__modsi3+0x58>
    30f8:	2900162e 	bgeu	r5,r4,3154 <__modsi3+0x6c>
    30fc:	01800804 	movi	r6,32
    3100:	00c00044 	movi	r3,1
    3104:	00000106 	br	310c <__modsi3+0x24>
    3108:	30000a26 	beq	r6,zero,3134 <__modsi3+0x4c>
    310c:	294b883a 	add	r5,r5,r5
    3110:	31bfffc4 	addi	r6,r6,-1
    3114:	18c7883a 	add	r3,r3,r3
    3118:	293ffb36 	bltu	r5,r4,3108 <__modsi3+0x20>
    311c:	18000526 	beq	r3,zero,3134 <__modsi3+0x4c>
    3120:	1806d07a 	srli	r3,r3,1
    3124:	11400136 	bltu	r2,r5,312c <__modsi3+0x44>
    3128:	1145c83a 	sub	r2,r2,r5
    312c:	280ad07a 	srli	r5,r5,1
    3130:	183ffb1e 	bne	r3,zero,3120 <__modsi3+0x38>
    3134:	38000126 	beq	r7,zero,313c <__modsi3+0x54>
    3138:	0085c83a 	sub	r2,zero,r2
    313c:	f800283a 	ret
    3140:	014bc83a 	sub	r5,zero,r5
    3144:	003fec06 	br	30f8 <__modsi3+0x10>
    3148:	0109c83a 	sub	r4,zero,r4
    314c:	01c00044 	movi	r7,1
    3150:	003fe706 	br	30f0 <__modsi3+0x8>
    3154:	00c00044 	movi	r3,1
    3158:	003ff106 	br	3120 <__modsi3+0x38>

0000315c <__udivsi3>:
    315c:	200d883a 	mov	r6,r4
    3160:	2900152e 	bgeu	r5,r4,31b8 <__udivsi3+0x5c>
    3164:	28001416 	blt	r5,zero,31b8 <__udivsi3+0x5c>
    3168:	00800804 	movi	r2,32
    316c:	00c00044 	movi	r3,1
    3170:	00000206 	br	317c <__udivsi3+0x20>
    3174:	10000e26 	beq	r2,zero,31b0 <__udivsi3+0x54>
    3178:	28000516 	blt	r5,zero,3190 <__udivsi3+0x34>
    317c:	294b883a 	add	r5,r5,r5
    3180:	10bfffc4 	addi	r2,r2,-1
    3184:	18c7883a 	add	r3,r3,r3
    3188:	293ffa36 	bltu	r5,r4,3174 <__udivsi3+0x18>
    318c:	18000826 	beq	r3,zero,31b0 <__udivsi3+0x54>
    3190:	0005883a 	mov	r2,zero
    3194:	31400236 	bltu	r6,r5,31a0 <__udivsi3+0x44>
    3198:	314dc83a 	sub	r6,r6,r5
    319c:	10c4b03a 	or	r2,r2,r3
    31a0:	1806d07a 	srli	r3,r3,1
    31a4:	280ad07a 	srli	r5,r5,1
    31a8:	183ffa1e 	bne	r3,zero,3194 <__udivsi3+0x38>
    31ac:	f800283a 	ret
    31b0:	0005883a 	mov	r2,zero
    31b4:	f800283a 	ret
    31b8:	00c00044 	movi	r3,1
    31bc:	003ff406 	br	3190 <__udivsi3+0x34>

000031c0 <__umodsi3>:
    31c0:	2005883a 	mov	r2,r4
    31c4:	2900122e 	bgeu	r5,r4,3210 <__umodsi3+0x50>
    31c8:	28001116 	blt	r5,zero,3210 <__umodsi3+0x50>
    31cc:	01800804 	movi	r6,32
    31d0:	00c00044 	movi	r3,1
    31d4:	00000206 	br	31e0 <__umodsi3+0x20>
    31d8:	30000c26 	beq	r6,zero,320c <__umodsi3+0x4c>
    31dc:	28000516 	blt	r5,zero,31f4 <__umodsi3+0x34>
    31e0:	294b883a 	add	r5,r5,r5
    31e4:	31bfffc4 	addi	r6,r6,-1
    31e8:	18c7883a 	add	r3,r3,r3
    31ec:	293ffa36 	bltu	r5,r4,31d8 <__umodsi3+0x18>
    31f0:	18000626 	beq	r3,zero,320c <__umodsi3+0x4c>
    31f4:	1806d07a 	srli	r3,r3,1
    31f8:	11400136 	bltu	r2,r5,3200 <__umodsi3+0x40>
    31fc:	1145c83a 	sub	r2,r2,r5
    3200:	280ad07a 	srli	r5,r5,1
    3204:	183ffb1e 	bne	r3,zero,31f4 <__umodsi3+0x34>
    3208:	f800283a 	ret
    320c:	f800283a 	ret
    3210:	00c00044 	movi	r3,1
    3214:	003ff706 	br	31f4 <__umodsi3+0x34>

00003218 <__mulsi3>:
    3218:	0005883a 	mov	r2,zero
    321c:	20000726 	beq	r4,zero,323c <__mulsi3+0x24>
    3220:	20c0004c 	andi	r3,r4,1
    3224:	2008d07a 	srli	r4,r4,1
    3228:	18000126 	beq	r3,zero,3230 <__mulsi3+0x18>
    322c:	1145883a 	add	r2,r2,r5
    3230:	294b883a 	add	r5,r5,r5
    3234:	203ffa1e 	bne	r4,zero,3220 <__mulsi3+0x8>
    3238:	f800283a 	ret
    323c:	f800283a 	ret

00003240 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    3240:	defffd04 	addi	sp,sp,-12
    3244:	df000215 	stw	fp,8(sp)
    3248:	df000204 	addi	fp,sp,8
    324c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    3250:	0001883a 	nop
    3254:	e0bfff17 	ldw	r2,-4(fp)
    3258:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    325c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    3260:	10000226 	beq	r2,zero,326c <_exit+0x2c>
    ALT_SIM_FAIL();
    3264:	002af070 	cmpltui	zero,zero,43969
    3268:	00000106 	br	3270 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    326c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    3270:	003fff06 	br	3270 <_exit+0x30>
